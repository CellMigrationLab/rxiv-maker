# ======================================================================
# Rxiv-Maker Local Testing Docker Compose Configuration
# ======================================================================
# This Docker Compose file provides a simplified way to run local testing
# with proper volume mounts and environment configuration.
#
# Usage:
#   docker-compose -f src/docker/docker-compose.test.yml up --build
#   docker-compose -f src/docker/docker-compose.test.yml down
# ======================================================================

version: '3.8'

services:
  # Main testing service
  rxiv-maker-test:
    build:
      context: ../..  # Build from project root
      dockerfile: src/docker/test-dockerfile
      args:
        BASE_IMAGE: henriqueslab/rxiv-maker-base:latest
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-local}
    
    image: rxiv-maker-test:compose
    container_name: rxiv-maker-test-compose
    
    # Platform specification for consistency
    platform: linux/amd64
    
    # Environment variables (can be overridden)
    environment:
      - MANUSCRIPT_PATH=${MANUSCRIPT_PATH:-EXAMPLE_MANUSCRIPT}
      - FORCE_FIGURES=${FORCE_FIGURES:-true}
      - TEXMFVAR=/tmp/texmf-var
      - R_LIBS_USER=/home/rxivmaker/.R/library
      - DEBUG=${DEBUG:-false}
      - VERBOSE=${VERBOSE:-false}
    
    # Volume mounts for development
    volumes:
      # Mount entire project for live development
      - ../..:/workspace
      # Persistent cache volumes
      - rxiv-maker-cache:/home/rxivmaker/.cache
      - rxiv-maker-r-libs:/home/rxivmaker/.R/library
      - rxiv-maker-texmf:/tmp/texmf-var
      # Output directory
      - ../../output:/workspace/output
    
    # Working directory
    working_dir: /workspace
    
    # Command to run (can be overridden)
    command: ["/workspace/src/docker/test-script.sh"]
    
    # Resource limits (adjust as needed)
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    
    # Restart policy
    restart: "no"
    
    # Enable interactive mode for debugging
    tty: true
    stdin_open: true
    
    # Network configuration
    networks:
      - rxiv-maker-network

  # Optional: Jupyter notebook service for interactive development
  jupyter:
    build:
      context: ../..
      dockerfile: src/docker/test-dockerfile
      args:
        BASE_IMAGE: henriqueslab/rxiv-maker-base:latest
    
    image: rxiv-maker-test:compose
    container_name: rxiv-maker-jupyter
    
    platform: linux/amd64
    
    environment:
      - MANUSCRIPT_PATH=${MANUSCRIPT_PATH:-EXAMPLE_MANUSCRIPT}
      - JUPYTER_ENABLE_LAB=yes
    
    volumes:
      - ../..:/workspace
      - rxiv-maker-cache:/home/rxivmaker/.cache
      - rxiv-maker-r-libs:/home/rxivmaker/.R/library
    
    working_dir: /workspace
    
    # Install and run Jupyter
    command: >
      bash -c "
        pip install jupyter jupyterlab &&
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root
      "
    
    ports:
      - "8888:8888"
    
    # Only start when explicitly requested
    profiles:
      - jupyter
    
    networks:
      - rxiv-maker-network

  # Optional: Development shell service
  shell:
    build:
      context: ../..
      dockerfile: src/docker/test-dockerfile
      args:
        BASE_IMAGE: henriqueslab/rxiv-maker-base:latest
    
    image: rxiv-maker-test:compose
    container_name: rxiv-maker-shell
    
    platform: linux/amd64
    
    environment:
      - MANUSCRIPT_PATH=${MANUSCRIPT_PATH:-EXAMPLE_MANUSCRIPT}
      - FORCE_FIGURES=${FORCE_FIGURES:-true}
      - TEXMFVAR=/tmp/texmf-var
      - R_LIBS_USER=/home/rxivmaker/.R/library
    
    volumes:
      - ../..:/workspace
      - rxiv-maker-cache:/home/rxivmaker/.cache
      - rxiv-maker-r-libs:/home/rxivmaker/.R/library
      - rxiv-maker-texmf:/tmp/texmf-var
    
    working_dir: /workspace
    
    # Interactive shell
    command: ["/bin/bash"]
    
    tty: true
    stdin_open: true
    
    # Only start when explicitly requested
    profiles:
      - shell
    
    networks:
      - rxiv-maker-network

# Named volumes for persistent data
volumes:
  rxiv-maker-cache:
    driver: local
    name: rxiv-maker-test-cache
  
  rxiv-maker-r-libs:
    driver: local
    name: rxiv-maker-test-r-libs
  
  rxiv-maker-texmf:
    driver: local
    name: rxiv-maker-test-texmf

# Network configuration
networks:
  rxiv-maker-network:
    driver: bridge
    name: rxiv-maker-test-network

# ======================================================================
# Additional Compose Commands and Usage Examples
# ======================================================================

# Basic usage:
# docker-compose -f src/docker/docker-compose.test.yml up --build

# Run with specific manuscript:
# MANUSCRIPT_PATH=MANUSCRIPT docker-compose -f src/docker/docker-compose.test.yml up --build

# Run with debug mode:
# DEBUG=true docker-compose -f src/docker/docker-compose.test.yml up --build

# Run interactive shell:
# docker-compose -f src/docker/docker-compose.test.yml --profile shell up

# Run Jupyter notebook:
# docker-compose -f src/docker/docker-compose.test.yml --profile jupyter up

# Clean up:
# docker-compose -f src/docker/docker-compose.test.yml down -v

# View logs:
# docker-compose -f src/docker/docker-compose.test.yml logs -f

# Execute commands in running container:
# docker-compose -f src/docker/docker-compose.test.yml exec rxiv-maker-test bash