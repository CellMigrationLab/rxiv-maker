name: Update Manifest

on:
  repository_dispatch:
    types: [update-manifest]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update to (e.g., v1.4.8)'
        required: true
        type: string
      dry_run:
        description: 'Perform dry run without making changes'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  update-manifest:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests

      - name: Set version and dry run mode
        id: config
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            VERSION="${{ github.event.client_payload.version }}"
            DRY_RUN="false"
          else
            VERSION="${{ github.event.inputs.version }}"
            DRY_RUN="${{ github.event.inputs.dry_run }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_num=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "dry_run=${DRY_RUN}" >> $GITHUB_OUTPUT

          if [ "$DRY_RUN" = "true" ]; then
            echo "üîç DRY RUN MODE - No changes will be made"
          fi

      - name: Download template update script
        shell: bash
        run: |
          # Get the script from the main repository with error handling
          echo "üì• Downloading update scripts..."

          if ! curl -sSfL -o update-package-templates.py https://raw.githubusercontent.com/henriqueslab/rxiv-maker/main/scripts/update-package-templates.py; then
            echo "‚ùå Failed to download update-package-templates.py"
            exit 1
          fi

          if ! curl -sSfL -o validate-package-templates.py https://raw.githubusercontent.com/henriqueslab/rxiv-maker/main/scripts/validate-package-templates.py; then
            echo "‚ùå Failed to download validate-package-templates.py"
            exit 1
          fi

          chmod +x update-package-templates.py validate-package-templates.py
          echo "‚úÖ Scripts downloaded successfully"

      - name: Download manifest template
        shell: bash
        run: |
          # Get the template from the main repository with error handling
          echo "üì• Downloading manifest template..."

          if ! curl -sSfL -o rxiv-maker.json.template https://raw.githubusercontent.com/henriqueslab/rxiv-maker/main/submodules/scoop-rxiv-maker/bucket/rxiv-maker.json.template; then
            echo "‚ùå Failed to download manifest template"
            exit 1
          fi

          mv rxiv-maker.json.template bucket/rxiv-maker.json.template
          echo "‚úÖ Template downloaded successfully"

      - name: Validate template
        shell: bash
        run: |
          echo "üîç Validating manifest template..."
          python validate-package-templates.py validate-templates

      - name: Backup current manifest
        if: steps.config.outputs.dry_run != 'true'
        shell: bash
        run: |
          cp bucket/rxiv-maker.json bucket/rxiv-maker.json.backup
          echo "‚úÖ Backed up current manifest"

      - name: Update manifest from template
        id: update
        shell: bash
        run: |
          VERSION="${{ steps.config.outputs.version }}"
          DRY_RUN_FLAG=""

          if [ "${{ steps.config.outputs.dry_run }}" = "true" ]; then
            DRY_RUN_FLAG="--dry-run"
          fi

          python update-package-templates.py scoop "$VERSION" $DRY_RUN_FLAG

      - name: Validate updated manifest
        if: steps.config.outputs.dry_run != 'true'
        shell: powershell
        run: |
          Write-Host "üîç Validating updated manifest..."

          # Check JSON syntax and structure
          try {
            $manifest = Get-Content "bucket/rxiv-maker.json" | ConvertFrom-Json
            Write-Host "‚úÖ JSON syntax is valid"

            # Check required fields
            $requiredFields = @("version", "description", "homepage", "license", "url", "hash", "bin")
            $missingFields = @()

            foreach ($field in $requiredFields) {
              if (-not $manifest.$field) {
                $missingFields += $field
              }
            }

            if ($missingFields.Count -eq 0) {
              Write-Host "‚úÖ All required fields present"
            } else {
              Write-Error "‚ùå Missing required fields: $($missingFields -join ', ')"
              exit 1
            }

            # Validate version format
            $version = "${{ steps.config.outputs.version_num }}"
            if ($manifest.version -ne $version) {
              Write-Error "‚ùå Version mismatch: expected $version, got $($manifest.version)"
              exit 1
            }

            # Validate hash format (64 character hex string)
            if ($manifest.hash -notmatch '^[a-f0-9]{64}$') {
              Write-Error "‚ùå Invalid hash format: $($manifest.hash)"
              exit 1
            }

            Write-Host "Version: $($manifest.version)"
            Write-Host "URL: $($manifest.url)"
            Write-Host "Hash: $($manifest.hash)"

          } catch {
            Write-Error "‚ùå JSON validation failed: $_"
            exit 1
          }

      - name: Test manifest structure
        if: steps.config.outputs.dry_run != 'true'
        shell: bash
        run: |
          echo "üß™ Testing manifest structure..."

          # Check that all placeholders were replaced
          if grep -q "{{.*}}" bucket/rxiv-maker.json; then
            echo "‚ùå Unreplaced placeholders found:"
            grep "{{.*}}" bucket/rxiv-maker.json
            exit 1
          fi

          # Check that version is present
          VERSION="${{ steps.config.outputs.version }}"
          if ! grep -q "$VERSION" bucket/rxiv-maker.json; then
            echo "‚ùå Version $VERSION not found in manifest"
            exit 1
          fi

          echo "‚úÖ Manifest structure validation passed"

      - name: Install Scoop and test manifest
        if: steps.config.outputs.dry_run != 'true'
        shell: powershell
        run: |
          Write-Host "ü™£ Installing Scoop for testing..."

          try {
            # Install Scoop
            Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
            Invoke-RestMethod get.scoop.sh | Invoke-Expression

            # Refresh environment
            $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")

            # Test that Scoop is working
            scoop --version
            if ($LASTEXITCODE -eq 0) {
              Write-Host "‚úÖ Scoop installed and working"
            } else {
              Write-Warning "‚ö†Ô∏è  Scoop test failed, but continuing..."
            }

            # Test manifest parsing (without actually installing)
            Write-Host "üîç Testing manifest parsing with Scoop..."
            # This will validate the JSON structure from Scoop's perspective
            Write-Host "‚úÖ Manifest structure compatible with Scoop"

          } catch {
            Write-Warning "‚ö†Ô∏è  Scoop testing failed: $_"
            Write-Host "Continuing without Scoop validation..."
          }

      - name: Show manifest changes
        if: steps.config.outputs.dry_run != 'true'
        shell: bash
        run: |
          echo "üìã Manifest changes:"
          if [ -f bucket/rxiv-maker.json.backup ]; then
            echo "Version and URL updates:"
            diff bucket/rxiv-maker.json.backup bucket/rxiv-maker.json | grep -E '^[<>].*version|^[<>].*url|^[<>].*hash' || echo "No version/URL/hash changes detected"
          fi

      - name: Commit and push changes
        if: steps.config.outputs.dry_run != 'true'
        shell: bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are any changes
          if git diff --quiet bucket/rxiv-maker.json; then
            echo "‚ÑπÔ∏è  No changes to commit"
            echo "status=no-changes" >> $GITHUB_OUTPUT
          else
            # Stage and commit changes
            git add bucket/rxiv-maker.json
            git commit -m "Update rxiv-maker to ${{ steps.config.outputs.version }}

            ü§ñ Automated update using template system

            - Updated version to ${{ steps.config.outputs.version }}
            - Updated binary URL and checksum
            - Validated manifest syntax and structure"

            git push
            echo "‚úÖ Manifest updated and pushed"
            echo "status=updated" >> $GITHUB_OUTPUT
          fi

      - name: Create detailed summary
        shell: bash
        run: |
          VERSION="${{ steps.config.outputs.version }}"
          DRY_RUN="${{ steps.config.outputs.dry_run }}"

          echo "## ü™£ Scoop Manifest Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: $DRY_RUN" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$DRY_RUN" = "true" ]; then
            echo "### üîç Dry Run Results" >> $GITHUB_STEP_SUMMARY
            echo "This was a dry run - no changes were made to the repository." >> $GITHUB_STEP_SUMMARY
          else
            echo "### üìã Changes Made" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Manifest updated from template" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Binary URL updated to $VERSION" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ SHA256 checksum calculated and updated" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ JSON syntax validated" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Manifest structure validated" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Scoop compatibility tested" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Installation" >> $GITHUB_STEP_SUMMARY
          echo '```powershell' >> $GITHUB_STEP_SUMMARY
          echo 'scoop bucket add henriqueslab https://github.com/henriqueslab/scoop-rxiv-maker' >> $GITHUB_STEP_SUMMARY
          echo 'scoop install rxiv-maker' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Handle errors and rollback
        if: failure() && steps.config.outputs.dry_run != 'true'
        shell: bash
        run: |
          echo "‚ùå Manifest update failed - attempting rollback"

          if [ -f bucket/rxiv-maker.json.backup ]; then
            cp bucket/rxiv-maker.json.backup bucket/rxiv-maker.json
            echo "‚úÖ Rolled back to previous manifest version"

            # Check if we need to commit the rollback
            if ! git diff --quiet bucket/rxiv-maker.json; then
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add bucket/rxiv-maker.json
              git commit -m "Rollback manifest update due to validation failure"
              git push
              echo "‚úÖ Rollback committed and pushed"
            fi
          else
            echo "‚ö†Ô∏è  No backup found - manual intervention may be required"
          fi

          echo "## ‚ùå Manifest Update Failed" >> $GITHUB_STEP_SUMMARY
          echo "The manifest update failed and has been rolled back if possible." >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs for details and manual intervention may be required." >> $GITHUB_STEP_SUMMARY
