<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="9" failures="3" skipped="0" tests="28" time="2.222" timestamp="2025-07-24T16:21:20.670739" hostname="MBP4RH.local"><testcase classname="tests.binary.test_ci_matrix.TestBinaryCompatibilityMatrix" name="test_file_system_compatibility" time="0.001" /><testcase classname="tests.binary.test_ci_matrix.TestCITestingMatrix" name="test_binary_build_matrix" time="0.001" /><testcase classname="tests.binary.test_ci_matrix.TestBinaryCompatibilityMatrix" name="test_architecture_detection" time="0.000" /><testcase classname="tests.binary.test_ci_matrix.TestCITestingMatrix" name="test_test_workflow_exists" time="0.001" /><testcase classname="tests.binary.test_ci_matrix.TestBinaryCompatibilityMatrix" name="test_python_version_compatibility" time="0.001" /><testcase classname="tests.binary.test_ci_matrix.TestCITestingMatrix" name="test_python_version_matrix" time="0.001" /><testcase classname="tests.binary.test_ci_matrix.TestBinaryCompatibilityMatrix" name="test_dependency_availability_matrix" time="0.231" /><testcase classname="tests.binary.test_ci_matrix.TestCITestingMatrix" name="test_timeout_configurations" time="0.018"><failure message="AssertionError: No timeout in release.yml&#10;assert in failed. [pytest-clarity diff shown]&#10;  #x1B[0m&#10;  #x1B[0m#x1B[32mLHS#x1B[0m vs #x1B[31mRHS#x1B[0m shown below&#10;  #x1B[0m&#10;  #x1B[0m#x1B[32mtimeout#x1B[0m&#10;  #x1B[0m#x1B[31mname: release and binary distribution#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31mon:#x1B[0m&#10;  #x1B[0m#x1B[31m  push:#x1B[0m&#10;  #x1B[0m#x1B[31m    tags:#x1B[0m&#10;  #x1B[0m#x1B[31m      - 'v*.*.*'#x1B[0m&#10;  #x1B[0m#x1B[31m  workflow_dispatch:#x1B[0m&#10;  #x1B[0m#x1B[31m    inputs:#x1B[0m&#10;  #x1B[0m#x1B[31m      tag:#x1B[0m&#10;  #x1B[0m#x1B[31m        description: 'tag to release (e.g., v1.4.8)'#x1B[0m&#10;  #x1B[0m#x1B[31m        required: true#x1B[0m&#10;  #x1B[0m#x1B[31m        type: string#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31mpermissions:#x1B[0m&#10;  #x1B[0m#x1B[31m  contents: write#x1B[0m&#10;  #x1B[0m#x1B[31m  actions: write#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31menv:#x1B[0m&#10;  #x1B[0m#x1B[31m  force_color: 1#x1B[0m&#10;  #x1B[0m#x1B[31m  pip_disable_pip_version_check: 1#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31mjobs:#x1B[0m&#10;  #x1B[0m#x1B[31m  # first job: run comprehensive tests#x1B[0m&#10;  #x1B[0m#x1B[31m  test:#x1B[0m&#10;  #x1B[0m#x1B[31m    name: test suite#x1B[0m&#10;  #x1B[0m#x1B[31m    runs-on: ${{ matrix.os }}#x1B[0m&#10;  #x1B[0m#x1B[31m    strategy:#x1B[0m&#10;  #x1B[0m#x1B[31m      matrix:#x1B[0m&#10;  #x1B[0m#x1B[31m        os: [ubuntu-latest, windows-latest, macos-latest]#x1B[0m&#10;  #x1B[0m#x1B[31m        python-version: ['3.11', '3.12']#x1B[0m&#10;  #x1B[0m#x1B[31m      fail-fast: false#x1B[0m&#10;  #x1B[0m#x1B[31m    #x1B[0m&#10;  #x1B[0m#x1B[31m    steps:#x1B[0m&#10;  #x1B[0m#x1B[31m      - name: checkout code#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: actions/checkout@v4#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          fetch-depth: 0#x1B[0m&#10;  #x1B[0m#x1B[31m          submodules: recursive#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: set up python ${{ matrix.python-version }}#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: actions/setup-python@v5#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          python-version: ${{ matrix.python-version }}#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: install uv#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: astral-sh/setup-uv@v4#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          version: &quot;latest&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          enable-cache: true#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: install system dependencies (linux)#x1B[0m&#10;  #x1B[0m#x1B[31m        if: runner.os == 'linux'#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          sudo apt-get update#x1B[0m&#10;  #x1B[0m#x1B[31m          sudo apt-get install -y \#x1B[0m&#10;  #x1B[0m#x1B[31m            build-essential \#x1B[0m&#10;  #x1B[0m#x1B[31m            libfreetype6-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            libjpeg-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            libpng-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            libtiff-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            libwebp-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            libopenjp2-7-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            zlib1g-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            liblcms2-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            libffi-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            pkg-config#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: install system dependencies (macos)#x1B[0m&#10;  #x1B[0m#x1B[31m        if: runner.os == 'macos'#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          brew install \#x1B[0m&#10;  #x1B[0m#x1B[31m            freetype \#x1B[0m&#10;  #x1B[0m#x1B[31m            jpeg \#x1B[0m&#10;  #x1B[0m#x1B[31m            libpng \#x1B[0m&#10;  #x1B[0m#x1B[31m            libtiff \#x1B[0m&#10;  #x1B[0m#x1B[31m            webp \#x1B[0m&#10;  #x1B[0m#x1B[31m            openjpeg \#x1B[0m&#10;  #x1B[0m#x1B[31m            zlib \#x1B[0m&#10;  #x1B[0m#x1B[31m            lcms2 \#x1B[0m&#10;  #x1B[0m#x1B[31m            libffi \#x1B[0m&#10;  #x1B[0m#x1B[31m            pkg-config#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: install dependencies and run tests#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          uv sync#x1B[0m&#10;  #x1B[0m#x1B[31m          uv run pytest tests/ --maxfail=5 -v#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m  # second job: build python packages#x1B[0m&#10;  #x1B[0m#x1B[31m  build-python:#x1B[0m&#10;  #x1B[0m#x1B[31m    name: build python packages#x1B[0m&#10;  #x1B[0m#x1B[31m    runs-on: ubuntu-latest#x1B[0m&#10;  #x1B[0m#x1B[31m    needs: test#x1B[0m&#10;  #x1B[0m#x1B[31m    #x1B[0m&#10;  #x1B[0m#x1B[31m    steps:#x1B[0m&#10;  #x1B[0m#x1B[31m      - name: checkout code#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: actions/checkout@v4#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          fetch-depth: 0#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: set up python#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: actions/setup-python@v5#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          python-version: '3.11'#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: install uv and build tools#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: astral-sh/setup-uv@v4#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          version: &quot;latest&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          enable-cache: true#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: build python packages#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          uv build#x1B[0m&#10;  #x1B[0m#x1B[31m          #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: verify packages#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          python -m pip install --upgrade pip twine#x1B[0m&#10;  #x1B[0m#x1B[31m          python -m twine check dist/*#x1B[0m&#10;  #x1B[0m#x1B[31m          #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: upload python packages#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: actions/upload-artifact@v4#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          name: python-packages#x1B[0m&#10;  #x1B[0m#x1B[31m          path: dist/#x1B[0m&#10;  #x1B[0m#x1B[31m          retention-days: 30#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m  # third job: build binaries for each platform#x1B[0m&#10;  #x1B[0m#x1B[31m  build-binaries:#x1B[0m&#10;  #x1B[0m#x1B[31m    name: build binary (${{ matrix.os }})#x1B[0m&#10;  #x1B[0m#x1B[31m    runs-on: ${{ matrix.os }}#x1B[0m&#10;  #x1B[0m#x1B[31m    needs: test#x1B[0m&#10;  #x1B[0m#x1B[31m    strategy:#x1B[0m&#10;  #x1B[0m#x1B[31m      matrix:#x1B[0m&#10;  #x1B[0m#x1B[31m        include:#x1B[0m&#10;  #x1B[0m#x1B[31m          - os: ubuntu-latest#x1B[0m&#10;  #x1B[0m#x1B[31m            platform: linux#x1B[0m&#10;  #x1B[0m#x1B[31m            arch: x64#x1B[0m&#10;  #x1B[0m#x1B[31m            binary_name: rxiv#x1B[0m&#10;  #x1B[0m#x1B[31m            artifact_name: rxiv-maker-linux-x64#x1B[0m&#10;  #x1B[0m#x1B[31m          - os: windows-latest#x1B[0m&#10;  #x1B[0m#x1B[31m            platform: windows#x1B[0m&#10;  #x1B[0m#x1B[31m            arch: x64#x1B[0m&#10;  #x1B[0m#x1B[31m            binary_name: rxiv.exe#x1B[0m&#10;  #x1B[0m#x1B[31m            artifact_name: rxiv-maker-windows-x64#x1B[0m&#10;  #x1B[0m#x1B[31m          - os: macos-latest#x1B[0m&#10;  #x1B[0m#x1B[31m            platform: macos#x1B[0m&#10;  #x1B[0m#x1B[31m            arch: x64#x1B[0m&#10;  #x1B[0m#x1B[31m            binary_name: rxiv#x1B[0m&#10;  #x1B[0m#x1B[31m            artifact_name: rxiv-maker-macos-x64#x1B[0m&#10;  #x1B[0m#x1B[31m          - os: macos-13  # intel mac for x64 build#x1B[0m&#10;  #x1B[0m#x1B[31m            platform: macos#x1B[0m&#10;  #x1B[0m#x1B[31m            arch: x64#x1B[0m&#10;  #x1B[0m#x1B[31m            binary_name: rxiv#x1B[0m&#10;  #x1B[0m#x1B[31m            artifact_name: rxiv-maker-macos-x64-intel#x1B[0m&#10;  #x1B[0m#x1B[31m          - os: macos-latest  # apple silicon mac for arm64 build#x1B[0m&#10;  #x1B[0m#x1B[31m            platform: macos#x1B[0m&#10;  #x1B[0m#x1B[31m            arch: arm64#x1B[0m&#10;  #x1B[0m#x1B[31m            binary_name: rxiv#x1B[0m&#10;  #x1B[0m#x1B[31m            artifact_name: rxiv-maker-macos-arm64#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m    steps:#x1B[0m&#10;  #x1B[0m#x1B[31m      - name: checkout code#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: actions/checkout@v4#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          fetch-depth: 0#x1B[0m&#10;  #x1B[0m#x1B[31m          submodules: recursive#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: set up python#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: actions/setup-python@v5#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          python-version: '3.11'#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: install uv#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: astral-sh/setup-uv@v4#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          version: &quot;latest&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          enable-cache: true#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: install system dependencies (linux)#x1B[0m&#10;  #x1B[0m#x1B[31m        if: runner.os == 'linux'#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          sudo apt-get update#x1B[0m&#10;  #x1B[0m#x1B[31m          sudo apt-get install -y \#x1B[0m&#10;  #x1B[0m#x1B[31m            build-essential \#x1B[0m&#10;  #x1B[0m#x1B[31m            libfreetype6-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            libjpeg-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            libpng-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            libtiff-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            libwebp-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            libopenjp2-7-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            zlib1g-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            liblcms2-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            libffi-dev \#x1B[0m&#10;  #x1B[0m#x1B[31m            pkg-config \#x1B[0m&#10;  #x1B[0m#x1B[31m            upx-ucl#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: install system dependencies (macos)#x1B[0m&#10;  #x1B[0m#x1B[31m        if: runner.os == 'macos'#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          brew install \#x1B[0m&#10;  #x1B[0m#x1B[31m            freetype \#x1B[0m&#10;  #x1B[0m#x1B[31m            jpeg \#x1B[0m&#10;  #x1B[0m#x1B[31m            libpng \#x1B[0m&#10;  #x1B[0m#x1B[31m            libtiff \#x1B[0m&#10;  #x1B[0m#x1B[31m            webp \#x1B[0m&#10;  #x1B[0m#x1B[31m            openjpeg \#x1B[0m&#10;  #x1B[0m#x1B[31m            zlib \#x1B[0m&#10;  #x1B[0m#x1B[31m            lcms2 \#x1B[0m&#10;  #x1B[0m#x1B[31m            libffi \#x1B[0m&#10;  #x1B[0m#x1B[31m            pkg-config \#x1B[0m&#10;  #x1B[0m#x1B[31m            upx#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: install dependencies and pyinstaller#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          uv sync#x1B[0m&#10;  #x1B[0m#x1B[31m          uv add pyinstaller#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: get version#x1B[0m&#10;  #x1B[0m#x1B[31m        id: get_version#x1B[0m&#10;  #x1B[0m#x1B[31m        shell: bash#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          if [ &quot;${{ github.event_name }}&quot; = &quot;workflow_dispatch&quot; ]; then#x1B[0m&#10;  #x1B[0m#x1B[31m            version=&quot;${{ github.event.inputs.tag }}&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          else#x1B[0m&#10;  #x1B[0m#x1B[31m            version=&quot;${{ github.ref_name }}&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          fi#x1B[0m&#10;  #x1B[0m#x1B[31m          echo &quot;version=${version#v}&quot; &gt;&gt; $github_output#x1B[0m&#10;  #x1B[0m#x1B[31m          echo &quot;tag=${version}&quot; &gt;&gt; $github_output#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: create pyinstaller spec file#x1B[0m&#10;  #x1B[0m#x1B[31m        shell: bash#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          cat &gt; rxiv-maker.spec &lt;&lt; 'eof'#x1B[0m&#10;  #x1B[0m#x1B[31m          # -*- mode: python ; coding: utf-8 -*-#x1B[0m&#10;  #x1B[0m#x1B[31m          import sys#x1B[0m&#10;  #x1B[0m#x1B[31m          from pathlib import path#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m          block_cipher = none#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m          # add the src directory to python path#x1B[0m&#10;  #x1B[0m#x1B[31m          src_path = str(path.cwd() / 'src')#x1B[0m&#10;  #x1B[0m#x1B[31m          if src_path not in sys.path:#x1B[0m&#10;  #x1B[0m#x1B[31m              sys.path.insert(0, src_path)#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m          a = analysis(#x1B[0m&#10;  #x1B[0m#x1B[31m              ['src/rxiv_maker/rxiv_maker_cli.py'],#x1B[0m&#10;  #x1B[0m#x1B[31m              pathex=[src_path],#x1B[0m&#10;  #x1B[0m#x1B[31m              binaries=[],#x1B[0m&#10;  #x1B[0m#x1B[31m              data=[#x1B[0m&#10;  #x1B[0m#x1B[31m                  ('src/rxiv_maker/tex', 'rxiv_maker/tex'),#x1B[0m&#10;  #x1B[0m#x1B[31m                  ('src/rxiv_maker/install/templates', #x1B[0m&#10;  #x1B[0m#x1B[31m'rxiv_maker/install/templates'),#x1B[0m&#10;  #x1B[0m#x1B[31m                  ('src/rxiv_maker/utils/schemas', 'rxiv_maker/utils/schemas'),#x1B[0m&#10;  #x1B[0m#x1B[31m              ],#x1B[0m&#10;  #x1B[0m#x1B[31m              hiddenimports=[#x1B[0m&#10;  #x1B[0m#x1B[31m                  'rxiv_maker',#x1B[0m&#10;  #x1B[0m#x1B[31m                  'rxiv_maker.cli',#x1B[0m&#10;  #x1B[0m#x1B[31m                  'rxiv_maker.commands',#x1B[0m&#10;  #x1B[0m#x1B[31m                  'rxiv_maker.converters',#x1B[0m&#10;  #x1B[0m#x1B[31m                  'rxiv_maker.processors',#x1B[0m&#10;  #x1B[0m#x1B[31m                  'rxiv_maker.utils',#x1B[0m&#10;  #x1B[0m#x1B[31m                  'rxiv_maker.validators',#x1B[0m&#10;  #x1B[0m#x1B[31m                  'rxiv_maker.install',#x1B[0m&#10;  #x1B[0m#x1B[31m                  'pkg_resources.py2_warn',#x1B[0m&#10;  #x1B[0m#x1B[31m              ],#x1B[0m&#10;  #x1B[0m#x1B[31m              hookspath=[],#x1B[0m&#10;  #x1B[0m#x1B[31m              hooksconfig={},#x1B[0m&#10;  #x1B[0m#x1B[31m              runtime_hooks=[],#x1B[0m&#10;  #x1B[0m#x1B[31m              excludes=[],#x1B[0m&#10;  #x1B[0m#x1B[31m              win_no_prefer_redirects=false,#x1B[0m&#10;  #x1B[0m#x1B[31m              win_private_assemblies=false,#x1B[0m&#10;  #x1B[0m#x1B[31m              cipher=block_cipher,#x1B[0m&#10;  #x1B[0m#x1B[31m              noarchive=false,#x1B[0m&#10;  #x1B[0m#x1B[31m          )#x1B[0m&#10;  #x1B[0m#x1B[31m          #x1B[0m&#10;  #x1B[0m#x1B[31m          pyz = pyz(a.pure, a.zipped_data, cipher=block_cipher)#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m          exe = exe(#x1B[0m&#10;  #x1B[0m#x1B[31m              pyz,#x1B[0m&#10;  #x1B[0m#x1B[31m              a.scripts,#x1B[0m&#10;  #x1B[0m#x1B[31m              a.binaries,#x1B[0m&#10;  #x1B[0m#x1B[31m              a.zipfiles,#x1B[0m&#10;  #x1B[0m#x1B[31m              a.data,#x1B[0m&#10;  #x1B[0m#x1B[31m              [],#x1B[0m&#10;  #x1B[0m#x1B[31m              name='${{ matrix.binary_name }}',#x1B[0m&#10;  #x1B[0m#x1B[31m              debug=false,#x1B[0m&#10;  #x1B[0m#x1B[31m              bootloader_ignore_signals=false,#x1B[0m&#10;  #x1B[0m#x1B[31m              strip=false,#x1B[0m&#10;  #x1B[0m#x1B[31m              upx=true,#x1B[0m&#10;  #x1B[0m#x1B[31m              upx_exclude=[],#x1B[0m&#10;  #x1B[0m#x1B[31m              runtime_tmpdir=none,#x1B[0m&#10;  #x1B[0m#x1B[31m              console=true,#x1B[0m&#10;  #x1B[0m#x1B[31m              disable_windowed_traceback=false,#x1B[0m&#10;  #x1B[0m#x1B[31m              argv_emulation=false,#x1B[0m&#10;  #x1B[0m#x1B[31m              target_arch=none,#x1B[0m&#10;  #x1B[0m#x1B[31m              codesign_identity=none,#x1B[0m&#10;  #x1B[0m#x1B[31m              entitlements_file=none,#x1B[0m&#10;  #x1B[0m#x1B[31m          )#x1B[0m&#10;  #x1B[0m#x1B[31m          eof#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: build binary with pyinstaller#x1B[0m&#10;  #x1B[0m#x1B[31m        shell: bash#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          echo &quot;building binary for ${{ matrix.platform }}-${{ matrix.arch #x1B[0m&#10;  #x1B[0m#x1B[31m}}...&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          uv run pyinstaller rxiv-maker.spec --clean --noconfirm#x1B[0m&#10;  #x1B[0m#x1B[31m          #x1B[0m&#10;  #x1B[0m#x1B[31m          # verify the binary was created#x1B[0m&#10;  #x1B[0m#x1B[31m          if [ -f &quot;dist/${{ matrix.binary_name }}&quot; ]; then#x1B[0m&#10;  #x1B[0m#x1B[31m            echo &quot;✅ binary created successfully: dist/${{ matrix.binary_name #x1B[0m&#10;  #x1B[0m#x1B[31m}}&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m            ls -la dist/#x1B[0m&#10;  #x1B[0m#x1B[31m          else#x1B[0m&#10;  #x1B[0m#x1B[31m            echo &quot;❌ binary not found in dist/&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m            ls -la dist/ || echo &quot;dist/ directory doesn't exist&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m            exit 1#x1B[0m&#10;  #x1B[0m#x1B[31m          fi#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: test binary functionality#x1B[0m&#10;  #x1B[0m#x1B[31m        shell: bash#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          echo &quot;#x1F9EA testing binary functionality...&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          #x1B[0m&#10;  #x1B[0m#x1B[31m          # basic command tests#x1B[0m&#10;  #x1B[0m#x1B[31m          echo &quot;testing basic commands...&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          ./dist/${{ matrix.binary_name }} --version#x1B[0m&#10;  #x1B[0m#x1B[31m          ./dist/${{ matrix.binary_name }} --help#x1B[0m&#10;  #x1B[0m#x1B[31m          #x1B[0m&#10;  #x1B[0m#x1B[31m          # test binary imports and core functionality#x1B[0m&#10;  #x1B[0m#x1B[31m          echo &quot;testing binary can initialize a project...&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          mkdir -p test-workspace &amp;&amp; cd test-workspace#x1B[0m&#10;  #x1B[0m#x1B[31m          #x1B[0m&#10;  #x1B[0m#x1B[31m          # test init command#x1B[0m&#10;  #x1B[0m#x1B[31m          ../dist/${{ matrix.binary_name }} init test-project --no-interactive #x1B[0m&#10;  #x1B[0m#x1B[31m|| echo &quot;init command failed&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          #x1B[0m&#10;  #x1B[0m#x1B[31m          if [ -d &quot;test-project&quot; ]; then#x1B[0m&#10;  #x1B[0m#x1B[31m            echo &quot;✅ binary can initialize projects&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m            #x1B[0m&#10;  #x1B[0m#x1B[31m            # test that required files were created#x1B[0m&#10;  #x1B[0m#x1B[31m            if [ -f &quot;test-project/00_config.yml&quot; ] &amp;&amp; [ -f #x1B[0m&#10;  #x1B[0m#x1B[31m&quot;test-project/01_main.md&quot; ]; then#x1B[0m&#10;  #x1B[0m#x1B[31m              echo &quot;✅ binary created required project files&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m            else#x1B[0m&#10;  #x1B[0m#x1B[31m              echo &quot;❌ binary failed to create required files&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m              ls -la test-project/#x1B[0m&#10;  #x1B[0m#x1B[31m            fi#x1B[0m&#10;  #x1B[0m#x1B[31m            #x1B[0m&#10;  #x1B[0m#x1B[31m            # test validate command (should work without latex)#x1B[0m&#10;  #x1B[0m#x1B[31m            cd test-project#x1B[0m&#10;  #x1B[0m#x1B[31m            ../../dist/${{ matrix.binary_name }} validate --no-doi || echo #x1B[0m&#10;  #x1B[0m#x1B[31m&quot;validation failed (expected without latex)&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m            cd ..#x1B[0m&#10;  #x1B[0m#x1B[31m          else#x1B[0m&#10;  #x1B[0m#x1B[31m            echo &quot;❌ binary failed to initialize project&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          fi#x1B[0m&#10;  #x1B[0m#x1B[31m          #x1B[0m&#10;  #x1B[0m#x1B[31m          cd ..#x1B[0m&#10;  #x1B[0m#x1B[31m          echo &quot;✅ binary functionality test completed&quot;#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: compress binary (linux/macos)#x1B[0m&#10;  #x1B[0m#x1B[31m        if: runner.os != 'windows'#x1B[0m&#10;  #x1B[0m#x1B[31m        shell: bash#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          cd dist#x1B[0m&#10;  #x1B[0m#x1B[31m          if command -v upx &gt;/dev/null 2&gt;&amp;1; then#x1B[0m&#10;  #x1B[0m#x1B[31m            echo &quot;compressing binary with upx...&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m            upx --best ${{ matrix.binary_name }} || echo &quot;upx compression #x1B[0m&#10;  #x1B[0m#x1B[31mfailed, continuing...&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          fi#x1B[0m&#10;  #x1B[0m#x1B[31m          tar -czf ${{ matrix.artifact_name }}.tar.gz ${{ matrix.binary_name }}#x1B[0m&#10;  #x1B[0m#x1B[31m          echo &quot;created: ${{ matrix.artifact_name }}.tar.gz&quot;#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: compress binary (windows)#x1B[0m&#10;  #x1B[0m#x1B[31m        if: runner.os == 'windows'#x1B[0m&#10;  #x1B[0m#x1B[31m        shell: powershell#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          cd dist#x1B[0m&#10;  #x1B[0m#x1B[31m          compress-archive -path ${{ matrix.binary_name }} -destinationpath ${{ #x1B[0m&#10;  #x1B[0m#x1B[31mmatrix.artifact_name }}.zip#x1B[0m&#10;  #x1B[0m#x1B[31m          write-host &quot;created: ${{ matrix.artifact_name }}.zip&quot;#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: upload binary artifact#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: actions/upload-artifact@v4#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          name: ${{ matrix.artifact_name }}#x1B[0m&#10;  #x1B[0m#x1B[31m          path: |#x1B[0m&#10;  #x1B[0m#x1B[31m            dist/${{ matrix.artifact_name }}.tar.gz#x1B[0m&#10;  #x1B[0m#x1B[31m            dist/${{ matrix.artifact_name }}.zip#x1B[0m&#10;  #x1B[0m#x1B[31m          retention-days: 30#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m  # fourth job: create github release#x1B[0m&#10;  #x1B[0m#x1B[31m  create-release:#x1B[0m&#10;  #x1B[0m#x1B[31m    name: create github release#x1B[0m&#10;  #x1B[0m#x1B[31m    runs-on: ubuntu-latest#x1B[0m&#10;  #x1B[0m#x1B[31m    needs: [test, build-python, build-binaries]#x1B[0m&#10;  #x1B[0m#x1B[31m    #x1B[0m&#10;  #x1B[0m#x1B[31m    outputs:#x1B[0m&#10;  #x1B[0m#x1B[31m      release_id: ${{ steps.create_release.outputs.id }}#x1B[0m&#10;  #x1B[0m#x1B[31m      upload_url: ${{ steps.create_release.outputs.upload_url }}#x1B[0m&#10;  #x1B[0m#x1B[31m    #x1B[0m&#10;  #x1B[0m#x1B[31m    steps:#x1B[0m&#10;  #x1B[0m#x1B[31m      - name: checkout code#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: actions/checkout@v4#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          fetch-depth: 0#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: get version#x1B[0m&#10;  #x1B[0m#x1B[31m        id: get_version#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          if [ &quot;${{ github.event_name }}&quot; = &quot;workflow_dispatch&quot; ]; then#x1B[0m&#10;  #x1B[0m#x1B[31m            version=&quot;${{ github.event.inputs.tag }}&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          else#x1B[0m&#10;  #x1B[0m#x1B[31m            version=&quot;${{ github.ref_name }}&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          fi#x1B[0m&#10;  #x1B[0m#x1B[31m          echo &quot;version=${version#v}&quot; &gt;&gt; $github_output#x1B[0m&#10;  #x1B[0m#x1B[31m          echo &quot;tag=${version}&quot; &gt;&gt; $github_output#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: download all artifacts#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: actions/download-artifact@v4#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          merge-multiple: true#x1B[0m&#10;  #x1B[0m#x1B[31m          path: artifacts/#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: list artifacts#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          echo &quot;downloaded artifacts:&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          find artifacts/ -type f -exec ls -la {} \;#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: generate release notes#x1B[0m&#10;  #x1B[0m#x1B[31m        id: release_notes#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          cat &gt; release_notes.md &lt;&lt; 'eof'#x1B[0m&#10;  #x1B[0m#x1B[31m          ## #x1F680 rxiv-maker ${{ steps.get_version.outputs.tag }}#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m          this release includes pre-compiled binaries for faster installation #x1B[0m&#10;  #x1B[0m#x1B[31macross platforms.#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m          ### #x1F4E6 installation options#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m          #### #x1F37A homebrew (macos/linux)#x1B[0m&#10;  #x1B[0m#x1B[31m          ```bash#x1B[0m&#10;  #x1B[0m#x1B[31m          brew tap henriqueslab/rxiv-maker#x1B[0m&#10;  #x1B[0m#x1B[31m          brew install rxiv-maker#x1B[0m&#10;  #x1B[0m#x1B[31m          ```#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m          #### #x1FAA3 scoop (windows)#x1B[0m&#10;  #x1B[0m#x1B[31m          ```powershell#x1B[0m&#10;  #x1B[0m#x1B[31m          scoop bucket add henriqueslab #x1B[0m&#10;  #x1B[0m#x1B[31mhttps://github.com/henriqueslab/scoop-rxiv-maker#x1B[0m&#10;  #x1B[0m#x1B[31m          scoop install rxiv-maker#x1B[0m&#10;  #x1B[0m#x1B[31m          ```#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m          #### #x1F40D python package (all platforms)#x1B[0m&#10;  #x1B[0m#x1B[31m          ```bash#x1B[0m&#10;  #x1B[0m#x1B[31m          pip install rxiv-maker#x1B[0m&#10;  #x1B[0m#x1B[31m          ```#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m          #### #x1F4E5 direct binary download#x1B[0m&#10;  #x1B[0m#x1B[31m          download the appropriate binary for your platform from the assets #x1B[0m&#10;  #x1B[0m#x1B[31mbelow:#x1B[0m&#10;  #x1B[0m#x1B[31m          - **linux x64**: `rxiv-maker-linux-x64.tar.gz`#x1B[0m&#10;  #x1B[0m#x1B[31m          - **windows x64**: `rxiv-maker-windows-x64.zip`#x1B[0m&#10;  #x1B[0m#x1B[31m          - **macos intel**: `rxiv-maker-macos-x64-intel.tar.gz`#x1B[0m&#10;  #x1B[0m#x1B[31m          - **macos apple silicon**: `rxiv-maker-macos-arm64.tar.gz`#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m          ### #x1F517 quick start#x1B[0m&#10;  #x1B[0m#x1B[31m          ```bash#x1B[0m&#10;  #x1B[0m#x1B[31m          rxiv init my-paper     # initialize new manuscript#x1B[0m&#10;  #x1B[0m#x1B[31m          cd my-paper#x1B[0m&#10;  #x1B[0m#x1B[31m          rxiv pdf               # generate pdf#x1B[0m&#10;  #x1B[0m#x1B[31m          ```#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m          ### #x1F4D6 documentation#x1B[0m&#10;  #x1B[0m#x1B[31m          - [installation #x1B[0m&#10;  #x1B[0m#x1B[31mguide](https://github.com/henriqueslab/rxiv-maker#installation)#x1B[0m&#10;  #x1B[0m#x1B[31m          - [user guide](https://github.com/henriqueslab/rxiv-maker#usage)#x1B[0m&#10;  #x1B[0m#x1B[31m          - #x1B[0m&#10;  #x1B[0m#x1B[31m[examples](https://github.com/henriqueslab/rxiv-maker/tree/main/example_manuscri#x1B[0m&#10;  #x1B[0m#x1B[31mpt)#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m          ---#x1B[0m&#10;  #x1B[0m#x1B[31m          *binary distributions are self-contained and don't require python #x1B[0m&#10;  #x1B[0m#x1B[31minstallation.*#x1B[0m&#10;  #x1B[0m#x1B[31m          eof#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: create release#x1B[0m&#10;  #x1B[0m#x1B[31m        id: create_release#x1B[0m&#10;  #x1B[0m#x1B[31m        env:#x1B[0m&#10;  #x1B[0m#x1B[31m          github_token: ${{ secrets.github_token }}#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          gh release create ${{ steps.get_version.outputs.tag }} \#x1B[0m&#10;  #x1B[0m#x1B[31m            --title &quot;rxiv-maker ${{ steps.get_version.outputs.tag }}&quot; \#x1B[0m&#10;  #x1B[0m#x1B[31m            --notes-file release_notes.md \#x1B[0m&#10;  #x1B[0m#x1B[31m            artifacts/python-packages/* \#x1B[0m&#10;  #x1B[0m#x1B[31m            artifacts/*.tar.gz \#x1B[0m&#10;  #x1B[0m#x1B[31m            artifacts/*.zip#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m  # fifth job: publish to pypi#x1B[0m&#10;  #x1B[0m#x1B[31m  publish-pypi:#x1B[0m&#10;  #x1B[0m#x1B[31m    name: publish to pypi#x1B[0m&#10;  #x1B[0m#x1B[31m    runs-on: ubuntu-latest#x1B[0m&#10;  #x1B[0m#x1B[31m    needs: [create-release]#x1B[0m&#10;  #x1B[0m#x1B[31m    if: github.event_name == 'push' &amp;&amp; startswith(github.ref, 'refs/tags/')#x1B[0m&#10;  #x1B[0m#x1B[31m    environment: release#x1B[0m&#10;  #x1B[0m#x1B[31m    #x1B[0m&#10;  #x1B[0m#x1B[31m    steps:#x1B[0m&#10;  #x1B[0m#x1B[31m      - name: download python packages#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: actions/download-artifact@v4#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          name: python-packages#x1B[0m&#10;  #x1B[0m#x1B[31m          path: dist/#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: publish to pypi#x1B[0m&#10;  #x1B[0m#x1B[31m        uses: pypa/gh-action-pypi-publish@release/v1#x1B[0m&#10;  #x1B[0m#x1B[31m        with:#x1B[0m&#10;  #x1B[0m#x1B[31m          password: ${{ secrets.pypi_api_token }}#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m  # sixth job: trigger package manager updates#x1B[0m&#10;  #x1B[0m#x1B[31m  update-package-managers:#x1B[0m&#10;  #x1B[0m#x1B[31m    name: update package managers#x1B[0m&#10;  #x1B[0m#x1B[31m    runs-on: ubuntu-latest#x1B[0m&#10;  #x1B[0m#x1B[31m    needs: [create-release]#x1B[0m&#10;  #x1B[0m#x1B[31m    if: github.event_name == 'push' &amp;&amp; startswith(github.ref, 'refs/tags/')#x1B[0m&#10;  #x1B[0m#x1B[31m    #x1B[0m&#10;  #x1B[0m#x1B[31m    steps:#x1B[0m&#10;  #x1B[0m#x1B[31m      - name: trigger homebrew update#x1B[0m&#10;  #x1B[0m#x1B[31m        env:#x1B[0m&#10;  #x1B[0m#x1B[31m          github_token: ${{ secrets.package_manager_token || #x1B[0m&#10;  #x1B[0m#x1B[31msecrets.github_token }}#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          echo &quot;triggering homebrew formula update...&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          curl -x post \#x1B[0m&#10;  #x1B[0m#x1B[31m            -h &quot;accept: application/vnd.github.v3+json&quot; \#x1B[0m&#10;  #x1B[0m#x1B[31m            -h &quot;authorization: token $github_token&quot; \#x1B[0m&#10;  #x1B[0m#x1B[31m            https://api.github.com/repos/henriqueslab/homebrew-rxiv-maker/dispat#x1B[0m&#10;  #x1B[0m#x1B[31mches \#x1B[0m&#10;  #x1B[0m#x1B[31m            -d '{&quot;event_type&quot;:&quot;update-formula&quot;,&quot;client_payload&quot;:{&quot;version&quot;:&quot;${{ #x1B[0m&#10;  #x1B[0m#x1B[31mgithub.ref_name }}&quot;}}'#x1B[0m&#10;  #x1B[0m&#10;  #x1B[0m#x1B[31m      - name: trigger scoop update#x1B[0m&#10;  #x1B[0m#x1B[31m        env:#x1B[0m&#10;  #x1B[0m#x1B[31m          github_token: ${{ secrets.package_manager_token || #x1B[0m&#10;  #x1B[0m#x1B[31msecrets.github_token }}#x1B[0m&#10;  #x1B[0m#x1B[31m        run: |#x1B[0m&#10;  #x1B[0m#x1B[31m          echo &quot;triggering scoop manifest update...&quot;#x1B[0m&#10;  #x1B[0m#x1B[31m          curl -x post \#x1B[0m&#10;  #x1B[0m#x1B[31m            -h &quot;accept: application/vnd.github.v3+json&quot; \#x1B[0m&#10;  #x1B[0m#x1B[31m            -h &quot;authorization: token $github_token&quot; \#x1B[0m&#10;  #x1B[0m#x1B[31m            https://api.github.com/repos/henriqueslab/scoop-rxiv-maker/dispatche#x1B[0m&#10;  #x1B[0m#x1B[31ms \#x1B[0m&#10;  #x1B[0m#x1B[31m            -d '{&quot;event_type&quot;:&quot;update-manifest&quot;,&quot;client_payload&quot;:{&quot;version&quot;:&quot;${{#x1B[0m&#10;  #x1B[0m#x1B[31mgithub.ref_name }}&quot;}}'#x1B[0m&#10;  #x1B[0m">tests/binary/test_ci_matrix.py:122: in test_timeout_configurations
    assert "timeout" in content.lower(), f"No timeout in {workflow_path.name}"
E   AssertionError: No timeout in release.yml
E   assert in failed. [pytest-clarity diff shown]
E     #x1B[0m
E     #x1B[0m#x1B[32mLHS#x1B[0m vs #x1B[31mRHS#x1B[0m shown below
E     #x1B[0m
E     #x1B[0m#x1B[32mtimeout#x1B[0m
E     #x1B[0m#x1B[31mname: release and binary distribution#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31mon:#x1B[0m
E     #x1B[0m#x1B[31m  push:#x1B[0m
E     #x1B[0m#x1B[31m    tags:#x1B[0m
E     #x1B[0m#x1B[31m      - 'v*.*.*'#x1B[0m
E     #x1B[0m#x1B[31m  workflow_dispatch:#x1B[0m
E     #x1B[0m#x1B[31m    inputs:#x1B[0m
E     #x1B[0m#x1B[31m      tag:#x1B[0m
E     #x1B[0m#x1B[31m        description: 'tag to release (e.g., v1.4.8)'#x1B[0m
E     #x1B[0m#x1B[31m        required: true#x1B[0m
E     #x1B[0m#x1B[31m        type: string#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31mpermissions:#x1B[0m
E     #x1B[0m#x1B[31m  contents: write#x1B[0m
E     #x1B[0m#x1B[31m  actions: write#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31menv:#x1B[0m
E     #x1B[0m#x1B[31m  force_color: 1#x1B[0m
E     #x1B[0m#x1B[31m  pip_disable_pip_version_check: 1#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31mjobs:#x1B[0m
E     #x1B[0m#x1B[31m  # first job: run comprehensive tests#x1B[0m
E     #x1B[0m#x1B[31m  test:#x1B[0m
E     #x1B[0m#x1B[31m    name: test suite#x1B[0m
E     #x1B[0m#x1B[31m    runs-on: ${{ matrix.os }}#x1B[0m
E     #x1B[0m#x1B[31m    strategy:#x1B[0m
E     #x1B[0m#x1B[31m      matrix:#x1B[0m
E     #x1B[0m#x1B[31m        os: [ubuntu-latest, windows-latest, macos-latest]#x1B[0m
E     #x1B[0m#x1B[31m        python-version: ['3.11', '3.12']#x1B[0m
E     #x1B[0m#x1B[31m      fail-fast: false#x1B[0m
E     #x1B[0m#x1B[31m    #x1B[0m
E     #x1B[0m#x1B[31m    steps:#x1B[0m
E     #x1B[0m#x1B[31m      - name: checkout code#x1B[0m
E     #x1B[0m#x1B[31m        uses: actions/checkout@v4#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          fetch-depth: 0#x1B[0m
E     #x1B[0m#x1B[31m          submodules: recursive#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: set up python ${{ matrix.python-version }}#x1B[0m
E     #x1B[0m#x1B[31m        uses: actions/setup-python@v5#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          python-version: ${{ matrix.python-version }}#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: install uv#x1B[0m
E     #x1B[0m#x1B[31m        uses: astral-sh/setup-uv@v4#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          version: "latest"#x1B[0m
E     #x1B[0m#x1B[31m          enable-cache: true#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: install system dependencies (linux)#x1B[0m
E     #x1B[0m#x1B[31m        if: runner.os == 'linux'#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          sudo apt-get update#x1B[0m
E     #x1B[0m#x1B[31m          sudo apt-get install -y \#x1B[0m
E     #x1B[0m#x1B[31m            build-essential \#x1B[0m
E     #x1B[0m#x1B[31m            libfreetype6-dev \#x1B[0m
E     #x1B[0m#x1B[31m            libjpeg-dev \#x1B[0m
E     #x1B[0m#x1B[31m            libpng-dev \#x1B[0m
E     #x1B[0m#x1B[31m            libtiff-dev \#x1B[0m
E     #x1B[0m#x1B[31m            libwebp-dev \#x1B[0m
E     #x1B[0m#x1B[31m            libopenjp2-7-dev \#x1B[0m
E     #x1B[0m#x1B[31m            zlib1g-dev \#x1B[0m
E     #x1B[0m#x1B[31m            liblcms2-dev \#x1B[0m
E     #x1B[0m#x1B[31m            libffi-dev \#x1B[0m
E     #x1B[0m#x1B[31m            pkg-config#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: install system dependencies (macos)#x1B[0m
E     #x1B[0m#x1B[31m        if: runner.os == 'macos'#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          brew install \#x1B[0m
E     #x1B[0m#x1B[31m            freetype \#x1B[0m
E     #x1B[0m#x1B[31m            jpeg \#x1B[0m
E     #x1B[0m#x1B[31m            libpng \#x1B[0m
E     #x1B[0m#x1B[31m            libtiff \#x1B[0m
E     #x1B[0m#x1B[31m            webp \#x1B[0m
E     #x1B[0m#x1B[31m            openjpeg \#x1B[0m
E     #x1B[0m#x1B[31m            zlib \#x1B[0m
E     #x1B[0m#x1B[31m            lcms2 \#x1B[0m
E     #x1B[0m#x1B[31m            libffi \#x1B[0m
E     #x1B[0m#x1B[31m            pkg-config#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: install dependencies and run tests#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          uv sync#x1B[0m
E     #x1B[0m#x1B[31m          uv run pytest tests/ --maxfail=5 -v#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m  # second job: build python packages#x1B[0m
E     #x1B[0m#x1B[31m  build-python:#x1B[0m
E     #x1B[0m#x1B[31m    name: build python packages#x1B[0m
E     #x1B[0m#x1B[31m    runs-on: ubuntu-latest#x1B[0m
E     #x1B[0m#x1B[31m    needs: test#x1B[0m
E     #x1B[0m#x1B[31m    #x1B[0m
E     #x1B[0m#x1B[31m    steps:#x1B[0m
E     #x1B[0m#x1B[31m      - name: checkout code#x1B[0m
E     #x1B[0m#x1B[31m        uses: actions/checkout@v4#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          fetch-depth: 0#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: set up python#x1B[0m
E     #x1B[0m#x1B[31m        uses: actions/setup-python@v5#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          python-version: '3.11'#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: install uv and build tools#x1B[0m
E     #x1B[0m#x1B[31m        uses: astral-sh/setup-uv@v4#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          version: "latest"#x1B[0m
E     #x1B[0m#x1B[31m          enable-cache: true#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: build python packages#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          uv build#x1B[0m
E     #x1B[0m#x1B[31m          #x1B[0m
E     #x1B[0m#x1B[31m      - name: verify packages#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          python -m pip install --upgrade pip twine#x1B[0m
E     #x1B[0m#x1B[31m          python -m twine check dist/*#x1B[0m
E     #x1B[0m#x1B[31m          #x1B[0m
E     #x1B[0m#x1B[31m      - name: upload python packages#x1B[0m
E     #x1B[0m#x1B[31m        uses: actions/upload-artifact@v4#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          name: python-packages#x1B[0m
E     #x1B[0m#x1B[31m          path: dist/#x1B[0m
E     #x1B[0m#x1B[31m          retention-days: 30#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m  # third job: build binaries for each platform#x1B[0m
E     #x1B[0m#x1B[31m  build-binaries:#x1B[0m
E     #x1B[0m#x1B[31m    name: build binary (${{ matrix.os }})#x1B[0m
E     #x1B[0m#x1B[31m    runs-on: ${{ matrix.os }}#x1B[0m
E     #x1B[0m#x1B[31m    needs: test#x1B[0m
E     #x1B[0m#x1B[31m    strategy:#x1B[0m
E     #x1B[0m#x1B[31m      matrix:#x1B[0m
E     #x1B[0m#x1B[31m        include:#x1B[0m
E     #x1B[0m#x1B[31m          - os: ubuntu-latest#x1B[0m
E     #x1B[0m#x1B[31m            platform: linux#x1B[0m
E     #x1B[0m#x1B[31m            arch: x64#x1B[0m
E     #x1B[0m#x1B[31m            binary_name: rxiv#x1B[0m
E     #x1B[0m#x1B[31m            artifact_name: rxiv-maker-linux-x64#x1B[0m
E     #x1B[0m#x1B[31m          - os: windows-latest#x1B[0m
E     #x1B[0m#x1B[31m            platform: windows#x1B[0m
E     #x1B[0m#x1B[31m            arch: x64#x1B[0m
E     #x1B[0m#x1B[31m            binary_name: rxiv.exe#x1B[0m
E     #x1B[0m#x1B[31m            artifact_name: rxiv-maker-windows-x64#x1B[0m
E     #x1B[0m#x1B[31m          - os: macos-latest#x1B[0m
E     #x1B[0m#x1B[31m            platform: macos#x1B[0m
E     #x1B[0m#x1B[31m            arch: x64#x1B[0m
E     #x1B[0m#x1B[31m            binary_name: rxiv#x1B[0m
E     #x1B[0m#x1B[31m            artifact_name: rxiv-maker-macos-x64#x1B[0m
E     #x1B[0m#x1B[31m          - os: macos-13  # intel mac for x64 build#x1B[0m
E     #x1B[0m#x1B[31m            platform: macos#x1B[0m
E     #x1B[0m#x1B[31m            arch: x64#x1B[0m
E     #x1B[0m#x1B[31m            binary_name: rxiv#x1B[0m
E     #x1B[0m#x1B[31m            artifact_name: rxiv-maker-macos-x64-intel#x1B[0m
E     #x1B[0m#x1B[31m          - os: macos-latest  # apple silicon mac for arm64 build#x1B[0m
E     #x1B[0m#x1B[31m            platform: macos#x1B[0m
E     #x1B[0m#x1B[31m            arch: arm64#x1B[0m
E     #x1B[0m#x1B[31m            binary_name: rxiv#x1B[0m
E     #x1B[0m#x1B[31m            artifact_name: rxiv-maker-macos-arm64#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m    steps:#x1B[0m
E     #x1B[0m#x1B[31m      - name: checkout code#x1B[0m
E     #x1B[0m#x1B[31m        uses: actions/checkout@v4#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          fetch-depth: 0#x1B[0m
E     #x1B[0m#x1B[31m          submodules: recursive#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: set up python#x1B[0m
E     #x1B[0m#x1B[31m        uses: actions/setup-python@v5#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          python-version: '3.11'#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: install uv#x1B[0m
E     #x1B[0m#x1B[31m        uses: astral-sh/setup-uv@v4#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          version: "latest"#x1B[0m
E     #x1B[0m#x1B[31m          enable-cache: true#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: install system dependencies (linux)#x1B[0m
E     #x1B[0m#x1B[31m        if: runner.os == 'linux'#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          sudo apt-get update#x1B[0m
E     #x1B[0m#x1B[31m          sudo apt-get install -y \#x1B[0m
E     #x1B[0m#x1B[31m            build-essential \#x1B[0m
E     #x1B[0m#x1B[31m            libfreetype6-dev \#x1B[0m
E     #x1B[0m#x1B[31m            libjpeg-dev \#x1B[0m
E     #x1B[0m#x1B[31m            libpng-dev \#x1B[0m
E     #x1B[0m#x1B[31m            libtiff-dev \#x1B[0m
E     #x1B[0m#x1B[31m            libwebp-dev \#x1B[0m
E     #x1B[0m#x1B[31m            libopenjp2-7-dev \#x1B[0m
E     #x1B[0m#x1B[31m            zlib1g-dev \#x1B[0m
E     #x1B[0m#x1B[31m            liblcms2-dev \#x1B[0m
E     #x1B[0m#x1B[31m            libffi-dev \#x1B[0m
E     #x1B[0m#x1B[31m            pkg-config \#x1B[0m
E     #x1B[0m#x1B[31m            upx-ucl#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: install system dependencies (macos)#x1B[0m
E     #x1B[0m#x1B[31m        if: runner.os == 'macos'#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          brew install \#x1B[0m
E     #x1B[0m#x1B[31m            freetype \#x1B[0m
E     #x1B[0m#x1B[31m            jpeg \#x1B[0m
E     #x1B[0m#x1B[31m            libpng \#x1B[0m
E     #x1B[0m#x1B[31m            libtiff \#x1B[0m
E     #x1B[0m#x1B[31m            webp \#x1B[0m
E     #x1B[0m#x1B[31m            openjpeg \#x1B[0m
E     #x1B[0m#x1B[31m            zlib \#x1B[0m
E     #x1B[0m#x1B[31m            lcms2 \#x1B[0m
E     #x1B[0m#x1B[31m            libffi \#x1B[0m
E     #x1B[0m#x1B[31m            pkg-config \#x1B[0m
E     #x1B[0m#x1B[31m            upx#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: install dependencies and pyinstaller#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          uv sync#x1B[0m
E     #x1B[0m#x1B[31m          uv add pyinstaller#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: get version#x1B[0m
E     #x1B[0m#x1B[31m        id: get_version#x1B[0m
E     #x1B[0m#x1B[31m        shell: bash#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then#x1B[0m
E     #x1B[0m#x1B[31m            version="${{ github.event.inputs.tag }}"#x1B[0m
E     #x1B[0m#x1B[31m          else#x1B[0m
E     #x1B[0m#x1B[31m            version="${{ github.ref_name }}"#x1B[0m
E     #x1B[0m#x1B[31m          fi#x1B[0m
E     #x1B[0m#x1B[31m          echo "version=${version#v}" &gt;&gt; $github_output#x1B[0m
E     #x1B[0m#x1B[31m          echo "tag=${version}" &gt;&gt; $github_output#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: create pyinstaller spec file#x1B[0m
E     #x1B[0m#x1B[31m        shell: bash#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          cat &gt; rxiv-maker.spec &lt;&lt; 'eof'#x1B[0m
E     #x1B[0m#x1B[31m          # -*- mode: python ; coding: utf-8 -*-#x1B[0m
E     #x1B[0m#x1B[31m          import sys#x1B[0m
E     #x1B[0m#x1B[31m          from pathlib import path#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m          block_cipher = none#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m          # add the src directory to python path#x1B[0m
E     #x1B[0m#x1B[31m          src_path = str(path.cwd() / 'src')#x1B[0m
E     #x1B[0m#x1B[31m          if src_path not in sys.path:#x1B[0m
E     #x1B[0m#x1B[31m              sys.path.insert(0, src_path)#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m          a = analysis(#x1B[0m
E     #x1B[0m#x1B[31m              ['src/rxiv_maker/rxiv_maker_cli.py'],#x1B[0m
E     #x1B[0m#x1B[31m              pathex=[src_path],#x1B[0m
E     #x1B[0m#x1B[31m              binaries=[],#x1B[0m
E     #x1B[0m#x1B[31m              data=[#x1B[0m
E     #x1B[0m#x1B[31m                  ('src/rxiv_maker/tex', 'rxiv_maker/tex'),#x1B[0m
E     #x1B[0m#x1B[31m                  ('src/rxiv_maker/install/templates', #x1B[0m
E     #x1B[0m#x1B[31m'rxiv_maker/install/templates'),#x1B[0m
E     #x1B[0m#x1B[31m                  ('src/rxiv_maker/utils/schemas', 'rxiv_maker/utils/schemas'),#x1B[0m
E     #x1B[0m#x1B[31m              ],#x1B[0m
E     #x1B[0m#x1B[31m              hiddenimports=[#x1B[0m
E     #x1B[0m#x1B[31m                  'rxiv_maker',#x1B[0m
E     #x1B[0m#x1B[31m                  'rxiv_maker.cli',#x1B[0m
E     #x1B[0m#x1B[31m                  'rxiv_maker.commands',#x1B[0m
E     #x1B[0m#x1B[31m                  'rxiv_maker.converters',#x1B[0m
E     #x1B[0m#x1B[31m                  'rxiv_maker.processors',#x1B[0m
E     #x1B[0m#x1B[31m                  'rxiv_maker.utils',#x1B[0m
E     #x1B[0m#x1B[31m                  'rxiv_maker.validators',#x1B[0m
E     #x1B[0m#x1B[31m                  'rxiv_maker.install',#x1B[0m
E     #x1B[0m#x1B[31m                  'pkg_resources.py2_warn',#x1B[0m
E     #x1B[0m#x1B[31m              ],#x1B[0m
E     #x1B[0m#x1B[31m              hookspath=[],#x1B[0m
E     #x1B[0m#x1B[31m              hooksconfig={},#x1B[0m
E     #x1B[0m#x1B[31m              runtime_hooks=[],#x1B[0m
E     #x1B[0m#x1B[31m              excludes=[],#x1B[0m
E     #x1B[0m#x1B[31m              win_no_prefer_redirects=false,#x1B[0m
E     #x1B[0m#x1B[31m              win_private_assemblies=false,#x1B[0m
E     #x1B[0m#x1B[31m              cipher=block_cipher,#x1B[0m
E     #x1B[0m#x1B[31m              noarchive=false,#x1B[0m
E     #x1B[0m#x1B[31m          )#x1B[0m
E     #x1B[0m#x1B[31m          #x1B[0m
E     #x1B[0m#x1B[31m          pyz = pyz(a.pure, a.zipped_data, cipher=block_cipher)#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m          exe = exe(#x1B[0m
E     #x1B[0m#x1B[31m              pyz,#x1B[0m
E     #x1B[0m#x1B[31m              a.scripts,#x1B[0m
E     #x1B[0m#x1B[31m              a.binaries,#x1B[0m
E     #x1B[0m#x1B[31m              a.zipfiles,#x1B[0m
E     #x1B[0m#x1B[31m              a.data,#x1B[0m
E     #x1B[0m#x1B[31m              [],#x1B[0m
E     #x1B[0m#x1B[31m              name='${{ matrix.binary_name }}',#x1B[0m
E     #x1B[0m#x1B[31m              debug=false,#x1B[0m
E     #x1B[0m#x1B[31m              bootloader_ignore_signals=false,#x1B[0m
E     #x1B[0m#x1B[31m              strip=false,#x1B[0m
E     #x1B[0m#x1B[31m              upx=true,#x1B[0m
E     #x1B[0m#x1B[31m              upx_exclude=[],#x1B[0m
E     #x1B[0m#x1B[31m              runtime_tmpdir=none,#x1B[0m
E     #x1B[0m#x1B[31m              console=true,#x1B[0m
E     #x1B[0m#x1B[31m              disable_windowed_traceback=false,#x1B[0m
E     #x1B[0m#x1B[31m              argv_emulation=false,#x1B[0m
E     #x1B[0m#x1B[31m              target_arch=none,#x1B[0m
E     #x1B[0m#x1B[31m              codesign_identity=none,#x1B[0m
E     #x1B[0m#x1B[31m              entitlements_file=none,#x1B[0m
E     #x1B[0m#x1B[31m          )#x1B[0m
E     #x1B[0m#x1B[31m          eof#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: build binary with pyinstaller#x1B[0m
E     #x1B[0m#x1B[31m        shell: bash#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          echo "building binary for ${{ matrix.platform }}-${{ matrix.arch #x1B[0m
E     #x1B[0m#x1B[31m}}..."#x1B[0m
E     #x1B[0m#x1B[31m          uv run pyinstaller rxiv-maker.spec --clean --noconfirm#x1B[0m
E     #x1B[0m#x1B[31m          #x1B[0m
E     #x1B[0m#x1B[31m          # verify the binary was created#x1B[0m
E     #x1B[0m#x1B[31m          if [ -f "dist/${{ matrix.binary_name }}" ]; then#x1B[0m
E     #x1B[0m#x1B[31m            echo "✅ binary created successfully: dist/${{ matrix.binary_name #x1B[0m
E     #x1B[0m#x1B[31m}}"#x1B[0m
E     #x1B[0m#x1B[31m            ls -la dist/#x1B[0m
E     #x1B[0m#x1B[31m          else#x1B[0m
E     #x1B[0m#x1B[31m            echo "❌ binary not found in dist/"#x1B[0m
E     #x1B[0m#x1B[31m            ls -la dist/ || echo "dist/ directory doesn't exist"#x1B[0m
E     #x1B[0m#x1B[31m            exit 1#x1B[0m
E     #x1B[0m#x1B[31m          fi#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: test binary functionality#x1B[0m
E     #x1B[0m#x1B[31m        shell: bash#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          echo "#x1F9EA testing binary functionality..."#x1B[0m
E     #x1B[0m#x1B[31m          #x1B[0m
E     #x1B[0m#x1B[31m          # basic command tests#x1B[0m
E     #x1B[0m#x1B[31m          echo "testing basic commands..."#x1B[0m
E     #x1B[0m#x1B[31m          ./dist/${{ matrix.binary_name }} --version#x1B[0m
E     #x1B[0m#x1B[31m          ./dist/${{ matrix.binary_name }} --help#x1B[0m
E     #x1B[0m#x1B[31m          #x1B[0m
E     #x1B[0m#x1B[31m          # test binary imports and core functionality#x1B[0m
E     #x1B[0m#x1B[31m          echo "testing binary can initialize a project..."#x1B[0m
E     #x1B[0m#x1B[31m          mkdir -p test-workspace &amp;&amp; cd test-workspace#x1B[0m
E     #x1B[0m#x1B[31m          #x1B[0m
E     #x1B[0m#x1B[31m          # test init command#x1B[0m
E     #x1B[0m#x1B[31m          ../dist/${{ matrix.binary_name }} init test-project --no-interactive #x1B[0m
E     #x1B[0m#x1B[31m|| echo "init command failed"#x1B[0m
E     #x1B[0m#x1B[31m          #x1B[0m
E     #x1B[0m#x1B[31m          if [ -d "test-project" ]; then#x1B[0m
E     #x1B[0m#x1B[31m            echo "✅ binary can initialize projects"#x1B[0m
E     #x1B[0m#x1B[31m            #x1B[0m
E     #x1B[0m#x1B[31m            # test that required files were created#x1B[0m
E     #x1B[0m#x1B[31m            if [ -f "test-project/00_config.yml" ] &amp;&amp; [ -f #x1B[0m
E     #x1B[0m#x1B[31m"test-project/01_main.md" ]; then#x1B[0m
E     #x1B[0m#x1B[31m              echo "✅ binary created required project files"#x1B[0m
E     #x1B[0m#x1B[31m            else#x1B[0m
E     #x1B[0m#x1B[31m              echo "❌ binary failed to create required files"#x1B[0m
E     #x1B[0m#x1B[31m              ls -la test-project/#x1B[0m
E     #x1B[0m#x1B[31m            fi#x1B[0m
E     #x1B[0m#x1B[31m            #x1B[0m
E     #x1B[0m#x1B[31m            # test validate command (should work without latex)#x1B[0m
E     #x1B[0m#x1B[31m            cd test-project#x1B[0m
E     #x1B[0m#x1B[31m            ../../dist/${{ matrix.binary_name }} validate --no-doi || echo #x1B[0m
E     #x1B[0m#x1B[31m"validation failed (expected without latex)"#x1B[0m
E     #x1B[0m#x1B[31m            cd ..#x1B[0m
E     #x1B[0m#x1B[31m          else#x1B[0m
E     #x1B[0m#x1B[31m            echo "❌ binary failed to initialize project"#x1B[0m
E     #x1B[0m#x1B[31m          fi#x1B[0m
E     #x1B[0m#x1B[31m          #x1B[0m
E     #x1B[0m#x1B[31m          cd ..#x1B[0m
E     #x1B[0m#x1B[31m          echo "✅ binary functionality test completed"#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: compress binary (linux/macos)#x1B[0m
E     #x1B[0m#x1B[31m        if: runner.os != 'windows'#x1B[0m
E     #x1B[0m#x1B[31m        shell: bash#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          cd dist#x1B[0m
E     #x1B[0m#x1B[31m          if command -v upx &gt;/dev/null 2&gt;&amp;1; then#x1B[0m
E     #x1B[0m#x1B[31m            echo "compressing binary with upx..."#x1B[0m
E     #x1B[0m#x1B[31m            upx --best ${{ matrix.binary_name }} || echo "upx compression #x1B[0m
E     #x1B[0m#x1B[31mfailed, continuing..."#x1B[0m
E     #x1B[0m#x1B[31m          fi#x1B[0m
E     #x1B[0m#x1B[31m          tar -czf ${{ matrix.artifact_name }}.tar.gz ${{ matrix.binary_name }}#x1B[0m
E     #x1B[0m#x1B[31m          echo "created: ${{ matrix.artifact_name }}.tar.gz"#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: compress binary (windows)#x1B[0m
E     #x1B[0m#x1B[31m        if: runner.os == 'windows'#x1B[0m
E     #x1B[0m#x1B[31m        shell: powershell#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          cd dist#x1B[0m
E     #x1B[0m#x1B[31m          compress-archive -path ${{ matrix.binary_name }} -destinationpath ${{ #x1B[0m
E     #x1B[0m#x1B[31mmatrix.artifact_name }}.zip#x1B[0m
E     #x1B[0m#x1B[31m          write-host "created: ${{ matrix.artifact_name }}.zip"#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: upload binary artifact#x1B[0m
E     #x1B[0m#x1B[31m        uses: actions/upload-artifact@v4#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          name: ${{ matrix.artifact_name }}#x1B[0m
E     #x1B[0m#x1B[31m          path: |#x1B[0m
E     #x1B[0m#x1B[31m            dist/${{ matrix.artifact_name }}.tar.gz#x1B[0m
E     #x1B[0m#x1B[31m            dist/${{ matrix.artifact_name }}.zip#x1B[0m
E     #x1B[0m#x1B[31m          retention-days: 30#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m  # fourth job: create github release#x1B[0m
E     #x1B[0m#x1B[31m  create-release:#x1B[0m
E     #x1B[0m#x1B[31m    name: create github release#x1B[0m
E     #x1B[0m#x1B[31m    runs-on: ubuntu-latest#x1B[0m
E     #x1B[0m#x1B[31m    needs: [test, build-python, build-binaries]#x1B[0m
E     #x1B[0m#x1B[31m    #x1B[0m
E     #x1B[0m#x1B[31m    outputs:#x1B[0m
E     #x1B[0m#x1B[31m      release_id: ${{ steps.create_release.outputs.id }}#x1B[0m
E     #x1B[0m#x1B[31m      upload_url: ${{ steps.create_release.outputs.upload_url }}#x1B[0m
E     #x1B[0m#x1B[31m    #x1B[0m
E     #x1B[0m#x1B[31m    steps:#x1B[0m
E     #x1B[0m#x1B[31m      - name: checkout code#x1B[0m
E     #x1B[0m#x1B[31m        uses: actions/checkout@v4#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          fetch-depth: 0#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: get version#x1B[0m
E     #x1B[0m#x1B[31m        id: get_version#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then#x1B[0m
E     #x1B[0m#x1B[31m            version="${{ github.event.inputs.tag }}"#x1B[0m
E     #x1B[0m#x1B[31m          else#x1B[0m
E     #x1B[0m#x1B[31m            version="${{ github.ref_name }}"#x1B[0m
E     #x1B[0m#x1B[31m          fi#x1B[0m
E     #x1B[0m#x1B[31m          echo "version=${version#v}" &gt;&gt; $github_output#x1B[0m
E     #x1B[0m#x1B[31m          echo "tag=${version}" &gt;&gt; $github_output#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: download all artifacts#x1B[0m
E     #x1B[0m#x1B[31m        uses: actions/download-artifact@v4#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          merge-multiple: true#x1B[0m
E     #x1B[0m#x1B[31m          path: artifacts/#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: list artifacts#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          echo "downloaded artifacts:"#x1B[0m
E     #x1B[0m#x1B[31m          find artifacts/ -type f -exec ls -la {} \;#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: generate release notes#x1B[0m
E     #x1B[0m#x1B[31m        id: release_notes#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          cat &gt; release_notes.md &lt;&lt; 'eof'#x1B[0m
E     #x1B[0m#x1B[31m          ## #x1F680 rxiv-maker ${{ steps.get_version.outputs.tag }}#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m          this release includes pre-compiled binaries for faster installation #x1B[0m
E     #x1B[0m#x1B[31macross platforms.#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m          ### #x1F4E6 installation options#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m          #### #x1F37A homebrew (macos/linux)#x1B[0m
E     #x1B[0m#x1B[31m          ```bash#x1B[0m
E     #x1B[0m#x1B[31m          brew tap henriqueslab/rxiv-maker#x1B[0m
E     #x1B[0m#x1B[31m          brew install rxiv-maker#x1B[0m
E     #x1B[0m#x1B[31m          ```#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m          #### #x1FAA3 scoop (windows)#x1B[0m
E     #x1B[0m#x1B[31m          ```powershell#x1B[0m
E     #x1B[0m#x1B[31m          scoop bucket add henriqueslab #x1B[0m
E     #x1B[0m#x1B[31mhttps://github.com/henriqueslab/scoop-rxiv-maker#x1B[0m
E     #x1B[0m#x1B[31m          scoop install rxiv-maker#x1B[0m
E     #x1B[0m#x1B[31m          ```#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m          #### #x1F40D python package (all platforms)#x1B[0m
E     #x1B[0m#x1B[31m          ```bash#x1B[0m
E     #x1B[0m#x1B[31m          pip install rxiv-maker#x1B[0m
E     #x1B[0m#x1B[31m          ```#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m          #### #x1F4E5 direct binary download#x1B[0m
E     #x1B[0m#x1B[31m          download the appropriate binary for your platform from the assets #x1B[0m
E     #x1B[0m#x1B[31mbelow:#x1B[0m
E     #x1B[0m#x1B[31m          - **linux x64**: `rxiv-maker-linux-x64.tar.gz`#x1B[0m
E     #x1B[0m#x1B[31m          - **windows x64**: `rxiv-maker-windows-x64.zip`#x1B[0m
E     #x1B[0m#x1B[31m          - **macos intel**: `rxiv-maker-macos-x64-intel.tar.gz`#x1B[0m
E     #x1B[0m#x1B[31m          - **macos apple silicon**: `rxiv-maker-macos-arm64.tar.gz`#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m          ### #x1F517 quick start#x1B[0m
E     #x1B[0m#x1B[31m          ```bash#x1B[0m
E     #x1B[0m#x1B[31m          rxiv init my-paper     # initialize new manuscript#x1B[0m
E     #x1B[0m#x1B[31m          cd my-paper#x1B[0m
E     #x1B[0m#x1B[31m          rxiv pdf               # generate pdf#x1B[0m
E     #x1B[0m#x1B[31m          ```#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m          ### #x1F4D6 documentation#x1B[0m
E     #x1B[0m#x1B[31m          - [installation #x1B[0m
E     #x1B[0m#x1B[31mguide](https://github.com/henriqueslab/rxiv-maker#installation)#x1B[0m
E     #x1B[0m#x1B[31m          - [user guide](https://github.com/henriqueslab/rxiv-maker#usage)#x1B[0m
E     #x1B[0m#x1B[31m          - #x1B[0m
E     #x1B[0m#x1B[31m[examples](https://github.com/henriqueslab/rxiv-maker/tree/main/example_manuscri#x1B[0m
E     #x1B[0m#x1B[31mpt)#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m          ---#x1B[0m
E     #x1B[0m#x1B[31m          *binary distributions are self-contained and don't require python #x1B[0m
E     #x1B[0m#x1B[31minstallation.*#x1B[0m
E     #x1B[0m#x1B[31m          eof#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: create release#x1B[0m
E     #x1B[0m#x1B[31m        id: create_release#x1B[0m
E     #x1B[0m#x1B[31m        env:#x1B[0m
E     #x1B[0m#x1B[31m          github_token: ${{ secrets.github_token }}#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          gh release create ${{ steps.get_version.outputs.tag }} \#x1B[0m
E     #x1B[0m#x1B[31m            --title "rxiv-maker ${{ steps.get_version.outputs.tag }}" \#x1B[0m
E     #x1B[0m#x1B[31m            --notes-file release_notes.md \#x1B[0m
E     #x1B[0m#x1B[31m            artifacts/python-packages/* \#x1B[0m
E     #x1B[0m#x1B[31m            artifacts/*.tar.gz \#x1B[0m
E     #x1B[0m#x1B[31m            artifacts/*.zip#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m  # fifth job: publish to pypi#x1B[0m
E     #x1B[0m#x1B[31m  publish-pypi:#x1B[0m
E     #x1B[0m#x1B[31m    name: publish to pypi#x1B[0m
E     #x1B[0m#x1B[31m    runs-on: ubuntu-latest#x1B[0m
E     #x1B[0m#x1B[31m    needs: [create-release]#x1B[0m
E     #x1B[0m#x1B[31m    if: github.event_name == 'push' &amp;&amp; startswith(github.ref, 'refs/tags/')#x1B[0m
E     #x1B[0m#x1B[31m    environment: release#x1B[0m
E     #x1B[0m#x1B[31m    #x1B[0m
E     #x1B[0m#x1B[31m    steps:#x1B[0m
E     #x1B[0m#x1B[31m      - name: download python packages#x1B[0m
E     #x1B[0m#x1B[31m        uses: actions/download-artifact@v4#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          name: python-packages#x1B[0m
E     #x1B[0m#x1B[31m          path: dist/#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: publish to pypi#x1B[0m
E     #x1B[0m#x1B[31m        uses: pypa/gh-action-pypi-publish@release/v1#x1B[0m
E     #x1B[0m#x1B[31m        with:#x1B[0m
E     #x1B[0m#x1B[31m          password: ${{ secrets.pypi_api_token }}#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m  # sixth job: trigger package manager updates#x1B[0m
E     #x1B[0m#x1B[31m  update-package-managers:#x1B[0m
E     #x1B[0m#x1B[31m    name: update package managers#x1B[0m
E     #x1B[0m#x1B[31m    runs-on: ubuntu-latest#x1B[0m
E     #x1B[0m#x1B[31m    needs: [create-release]#x1B[0m
E     #x1B[0m#x1B[31m    if: github.event_name == 'push' &amp;&amp; startswith(github.ref, 'refs/tags/')#x1B[0m
E     #x1B[0m#x1B[31m    #x1B[0m
E     #x1B[0m#x1B[31m    steps:#x1B[0m
E     #x1B[0m#x1B[31m      - name: trigger homebrew update#x1B[0m
E     #x1B[0m#x1B[31m        env:#x1B[0m
E     #x1B[0m#x1B[31m          github_token: ${{ secrets.package_manager_token || #x1B[0m
E     #x1B[0m#x1B[31msecrets.github_token }}#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          echo "triggering homebrew formula update..."#x1B[0m
E     #x1B[0m#x1B[31m          curl -x post \#x1B[0m
E     #x1B[0m#x1B[31m            -h "accept: application/vnd.github.v3+json" \#x1B[0m
E     #x1B[0m#x1B[31m            -h "authorization: token $github_token" \#x1B[0m
E     #x1B[0m#x1B[31m            https://api.github.com/repos/henriqueslab/homebrew-rxiv-maker/dispat#x1B[0m
E     #x1B[0m#x1B[31mches \#x1B[0m
E     #x1B[0m#x1B[31m            -d '{"event_type":"update-formula","client_payload":{"version":"${{ #x1B[0m
E     #x1B[0m#x1B[31mgithub.ref_name }}"}}'#x1B[0m
E     #x1B[0m
E     #x1B[0m#x1B[31m      - name: trigger scoop update#x1B[0m
E     #x1B[0m#x1B[31m        env:#x1B[0m
E     #x1B[0m#x1B[31m          github_token: ${{ secrets.package_manager_token || #x1B[0m
E     #x1B[0m#x1B[31msecrets.github_token }}#x1B[0m
E     #x1B[0m#x1B[31m        run: |#x1B[0m
E     #x1B[0m#x1B[31m          echo "triggering scoop manifest update..."#x1B[0m
E     #x1B[0m#x1B[31m          curl -x post \#x1B[0m
E     #x1B[0m#x1B[31m            -h "accept: application/vnd.github.v3+json" \#x1B[0m
E     #x1B[0m#x1B[31m            -h "authorization: token $github_token" \#x1B[0m
E     #x1B[0m#x1B[31m            https://api.github.com/repos/henriqueslab/scoop-rxiv-maker/dispatche#x1B[0m
E     #x1B[0m#x1B[31ms \#x1B[0m
E     #x1B[0m#x1B[31m            -d '{"event_type":"update-manifest","client_payload":{"version":"${{#x1B[0m
E     #x1B[0m#x1B[31mgithub.ref_name }}"}}'#x1B[0m
E     #x1B[0m</failure></testcase><testcase classname="tests.binary.test_ci_matrix.TestBinaryCompatibilityMatrix" name="test_encoding_compatibility" time="0.001"><failure message="NameError: name 'os' is not defined">tests/binary/test_ci_matrix.py:245: in test_encoding_compatibility
    os.unlink(temp_path)
E   NameError: name 'os' is not defined</failure></testcase><testcase classname="tests.binary.test_ci_matrix.TestCITestingMatrix" name="test_architecture_matrix" time="0.000" /><testcase classname="tests.binary.test_ci_matrix.TestCITestingMatrix" name="test_dependency_matrix_testing" time="0.002" /><testcase classname="tests.binary.test_ci_matrix.TestCITestingMatrix" name="test_release_workflow_exists" time="0.001" /><testcase classname="tests.binary.test_ci_matrix.TestBinaryCompatibilityMatrix" name="test_os_specific_functionality" time="0.003"><failure message="ImportError: cannot import name 'get_platform_info' from 'rxiv_maker.utils.platform' (/Users/paxcalpt/Documents/GitHub/rxiv-maker/src/rxiv_maker/utils/platform.py)">tests/binary/test_ci_matrix.py:165: in test_os_specific_functionality
    from rxiv_maker.utils.platform import get_platform_info
E   ImportError: cannot import name 'get_platform_info' from 'rxiv_maker.utils.platform' (/Users/paxcalpt/Documents/GitHub/rxiv-maker/src/rxiv_maker/utils/platform.py)</failure></testcase><testcase classname="tests.binary.test_ci_matrix.TestCITestingMatrix" name="test_test_categorization" time="0.001" /><testcase classname="tests.binary.test_ci_matrix.TestCITestingMatrix" name="test_os_matrix_coverage" time="0.000" /><testcase classname="tests.binary.test_ci_matrix.TestCIPerformanceMatrix" name="test_parallel_execution" time="0.000"><error message="failed on setup with &quot;file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 285&#10;      def test_parallel_execution(self, test_workflow_path):&#10;E       fixture 'test_workflow_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:285&quot;">file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 285
      def test_parallel_execution(self, test_workflow_path):
E       fixture 'test_workflow_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:285</error></testcase><testcase classname="tests.binary.test_ci_matrix.TestCIQualityAssurance" name="test_security_scanning" time="0.000"><error message="failed on setup with &quot;file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 342&#10;      def test_security_scanning(self, test_workflow_path, release_workflow_path):&#10;E       fixture 'test_workflow_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:342&quot;">file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 342
      def test_security_scanning(self, test_workflow_path, release_workflow_path):
E       fixture 'test_workflow_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:342</error></testcase><testcase classname="tests.binary.test_ci_matrix.TestCIQualityAssurance" name="test_test_coverage_reporting" time="0.000"><error message="failed on setup with &quot;file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 362&#10;      def test_test_coverage_reporting(self, test_workflow_path):&#10;E       fixture 'test_workflow_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:362&quot;">file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 362
      def test_test_coverage_reporting(self, test_workflow_path):
E       fixture 'test_workflow_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:362</error></testcase><testcase classname="tests.binary.test_ci_matrix.TestCIPerformanceMatrix" name="test_resource_optimization" time="0.000"><error message="failed on setup with &quot;file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 298&#10;      def test_resource_optimization(self, release_workflow_path):&#10;E       fixture 'release_workflow_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:298&quot;">file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 298
      def test_resource_optimization(self, release_workflow_path):
E       fixture 'release_workflow_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:298</error></testcase><testcase classname="tests.binary.test_ci_matrix.TestCIQualityAssurance" name="test_type_checking_integration" time="0.000"><error message="failed on setup with &quot;file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 328&#10;      def test_type_checking_integration(self, test_workflow_path):&#10;E       fixture 'test_workflow_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:328&quot;">file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 328
      def test_type_checking_integration(self, test_workflow_path):
E       fixture 'test_workflow_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:328</error></testcase><testcase classname="tests.binary.test_ci_matrix.TestBinaryTestingIntegrations" name="test_end_to_end_binary_tests" time="0.000" /><testcase classname="tests.binary.test_ci_matrix.TestBinaryTestingIntegrations" name="test_package_manager_integration_tests" time="0.001" /><testcase classname="tests.binary.test_ci_matrix.TestBinaryTestingIntegrations" name="test_binary_smoke_tests" time="0.001" /><testcase classname="tests.binary.test_ci_matrix.TestCIQualityAssurance" name="test_artifact_retention_policy" time="0.001"><error message="failed on setup with &quot;file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 376&#10;      def test_artifact_retention_policy(self, release_workflow_path):&#10;E       fixture 'release_workflow_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:376&quot;">file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 376
      def test_artifact_retention_policy(self, release_workflow_path):
E       fixture 'release_workflow_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:376</error></testcase><testcase classname="tests.binary.test_ci_matrix.TestCIPerformanceMatrix" name="test_cache_configuration" time="0.000"><error message="failed on setup with &quot;file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 268&#10;      def test_cache_configuration(self, test_workflow_path, release_workflow_path):&#10;E       fixture 'test_workflow_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:268&quot;">file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 268
      def test_cache_configuration(self, test_workflow_path, release_workflow_path):
E       fixture 'test_workflow_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:268</error></testcase><testcase classname="tests.binary.test_ci_matrix.TestCIQualityAssurance" name="test_linting_across_platforms" time="0.000"><error message="failed on setup with &quot;file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 315&#10;      def test_linting_across_platforms(self, test_workflow_path):&#10;E       fixture 'test_workflow_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:315&quot;">file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 315
      def test_linting_across_platforms(self, test_workflow_path):
E       fixture 'test_workflow_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:315</error></testcase><testcase classname="tests.binary.test_ci_matrix.TestCITestingMatrix" name="test_failure_handling_matrix" time="0.000" /><testcase classname="tests.binary.test_ci_matrix.TestCIPerformanceMatrix" name="test_build_time_considerations" time="0.000"><error message="failed on setup with &quot;file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 251&#10;      def test_build_time_considerations(self, release_workflow_path):&#10;E       fixture 'release_workflow_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:251&quot;">file /Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py, line 251
      def test_build_time_considerations(self, release_workflow_path):
E       fixture 'release_workflow_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, datadir, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, lazy_datadir, mocker, module_mocker, monkeypatch, nb_regression, no_cover, original_datadir, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_markdown, sample_tex_template, sample_yaml_metadata, session_mocker, shared_datadir, snapshot, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/paxcalpt/Documents/GitHub/rxiv-maker/tests/binary/test_ci_matrix.py:251</error></testcase></testsuite></testsuites>
