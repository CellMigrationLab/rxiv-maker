# ======================================================================
# Docker Compose for Rxiv-Maker Installation Testing
# ======================================================================
# This compose file sets up testing environment for the Universal
# Python Wheel Installer functionality.
# ======================================================================

version: '3.8'

services:
  # Main installation test service
  install-test:
    build:
      context: ../..
      dockerfile: tests/docker/Dockerfile.test

    image: rxiv-maker-install-test:latest
    container_name: rxiv-maker-install-test

    # Platform specification
    platform: linux/amd64

    # Environment variables
    environment:
      - DOCKER_AVAILABLE=true
      - RXIV_INSTALL_MODE=${RXIV_INSTALL_MODE:-full}
      - RXIV_SKIP_SYSTEM_DEPS=${RXIV_SKIP_SYSTEM_DEPS:-false}
      - PYTHONUNBUFFERED=1
      - DEBIAN_FRONTEND=noninteractive
      - TZ=UTC

    # Volume mounts
    volumes:
      # Mount project root for testing
      - ../..:/workspace:ro
      # Mount test results
      - ./test-results:/test-results
      # Mount Docker socket for container-in-container testing
      - /var/run/docker.sock:/var/run/docker.sock

    # Working directory
    working_dir: /test

    # Command to run tests
    command: >
      bash -c "
        cd /workspace &&
        python -m pytest tests/install/ -v --tb=short --junit-xml=/test-results/junit.xml --cov=src/rxiv_maker/install --cov-report=html:/test-results/coverage --cov-report=xml:/test-results/coverage.xml
      "

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

    # Network configuration
    networks:
      - install-test-network

    # Restart policy
    restart: "no"

    # Health check
    healthcheck:
      test: ["CMD", "python", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Ubuntu clean environment for testing
  ubuntu-clean:
    image: ubuntu:22.04
    container_name: ubuntu-clean-test

    platform: linux/amd64

    environment:
      - DEBIAN_FRONTEND=noninteractive
      - TZ=UTC
      - LANG=C.UTF-8
      - LC_ALL=C.UTF-8
      - PYTHONUNBUFFERED=1

    volumes:
      - ../..:/workspace:ro
      - ./test-results:/test-results

    working_dir: /test

    # Keep container running for testing
    command: ["sleep", "3600"]

    networks:
      - install-test-network

    # Only start when requested
    profiles:
      - clean-ubuntu

  # Interactive test environment
  test-shell:
    build:
      context: ../..
      dockerfile: tests/docker/Dockerfile.test

    image: rxiv-maker-install-test:latest
    container_name: rxiv-maker-test-shell

    platform: linux/amd64

    environment:
      - DOCKER_AVAILABLE=true
      - RXIV_INSTALL_MODE=${RXIV_INSTALL_MODE:-full}
      - RXIV_SKIP_SYSTEM_DEPS=${RXIV_SKIP_SYSTEM_DEPS:-false}
      - PYTHONUNBUFFERED=1

    volumes:
      - ../..:/workspace
      - ./test-results:/test-results
      - /var/run/docker.sock:/var/run/docker.sock

    working_dir: /workspace

    # Interactive shell
    command: ["/bin/bash"]

    tty: true
    stdin_open: true

    networks:
      - install-test-network

    # Only start when requested
    profiles:
      - shell

# Named volumes
volumes:
  test-results:
    driver: local
    name: rxiv-maker-install-test-results

# Network configuration
networks:
  install-test-network:
    driver: bridge
    name: rxiv-maker-install-test-network

# ======================================================================
# Usage Examples
# ======================================================================

# Run all installation tests:
# docker-compose -f tests/docker/docker-compose.install-test.yml up --build

# Run tests with specific mode:
# RXIV_INSTALL_MODE=minimal docker-compose -f tests/docker/docker-compose.install-test.yml up --build

# Run with system deps skipped:
# RXIV_SKIP_SYSTEM_DEPS=true docker-compose -f tests/docker/docker-compose.install-test.yml up --build

# Interactive shell for debugging:
# docker-compose -f tests/docker/docker-compose.install-test.yml --profile shell up

# Clean Ubuntu environment:
# docker-compose -f tests/docker/docker-compose.install-test.yml --profile clean-ubuntu up

# Clean up:
# docker-compose -f tests/docker/docker-compose.install-test.yml down -v

# View test results:
# docker-compose -f tests/docker/docker-compose.install-test.yml exec install-test cat /test-results/junit.xml
