name: Test Windows LaTeX PDF Generation

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean
      manuscript_path:
        description: 'Path to manuscript directory'
        required: false
        default: 'EXAMPLE_MANUSCRIPT'
        type: string

jobs:
  test-windows-latex:
    runs-on: windows-latest
    env:
      MANUSCRIPT_PATH: ${{ github.event.inputs.manuscript_path || 'EXAMPLE_MANUSCRIPT' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set manuscript path
      run: |
        $manuscriptPath = "${{ github.event.inputs.manuscript_path }}"
        if ([string]::IsNullOrEmpty($manuscriptPath)) {
          $manuscriptPath = "EXAMPLE_MANUSCRIPT"
        }
        Write-Host "Using manuscript path: $manuscriptPath"
        echo "MANUSCRIPT_PATH=$manuscriptPath" >> $env:GITHUB_ENV
      shell: pwsh

    # Setup TeXLive on Windows - reliable LaTeX installation
    - name: Setup TeXLive
      uses: teatimeguest/setup-texlive-action@v3
      with:
        packages: |
          scheme-basic
          authblk
          preprint
          geometry
          amsmath
          amsfonts
          amssymb
          hyperref
          graphicx

    # Cache uv installation for Python package management
    - name: Cache uv installation
      uses: actions/cache@v4
      with:
        path: ~\.local\bin
        key: ${{ runner.os }}-uv-${{ hashFiles('.github/workflows/test-windows-setup.yml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install uv package manager
      run: |
        Write-Host "Installing uv..."
        powershell -Command "irm https://astral.sh/uv/install.ps1 | iex"
        $uvPath = "$env:USERPROFILE\.local\bin"
        echo "$uvPath" >> $env:GITHUB_PATH
        Write-Host "✅ uv installation completed at: $uvPath"
      shell: pwsh

    # Setup Makefile environment for GitHub Actions (avoid shell syntax issues)
    - name: Setup Makefile environment for GitHub Actions
      run: |
        Write-Host "Setting up Makefile environment variables for GitHub Actions..."
        # GitHub Actions uses bash even on Windows, so force Unix-style detection
        echo "MAKEFILE_FORCE_UNIX=1" >> $env:GITHUB_ENV
        echo "SHELL=/bin/bash" >> $env:GITHUB_ENV
        Write-Host "✅ Makefile environment configured for GitHub Actions"
      shell: pwsh

    # Cache virtual environment
    - name: Cache virtual environment
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-venv-${{ hashFiles('pyproject.toml', 'requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-venv-

    - name: Verify tools installation
      run: |
        Write-Host "=== Verifying Tools Installation ==="
        
        # Test uv
        try {
          uv --version
          Write-Host "✅ uv is available"
        } catch {
          Write-Host "⚠️ uv not found"
        }
        
        # Test LaTeX
        $latexFound = $false
        $latexCommands = @("pdflatex", "latex")
        foreach ($cmd in $latexCommands) {
          try {
            $result = & $cmd --version 2>&1
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ $cmd is available"
              $latexFound = $true
              break
            }
          } catch {
            Write-Host "⚠️ $cmd not found"
          }
        }
        
        if (-not $latexFound) {
          Write-Host "⚠️ LaTeX installation could not be verified"
        }
        
        Write-Host "=== Tool Verification Complete ==="
      shell: pwsh

    - name: Setup Python environment
      run: |
        Write-Host "Setting up Python environment..."
        try {
          $env:UV_SYSTEM_PYTHON = "1"
          make setup
          Write-Host "✅ Python environment setup completed"
        } catch {
          Write-Host "⚠️ Python environment setup failed: $_"
        }
      shell: pwsh

    # Debug information (only when debug mode is enabled)
    - name: Debug - Show platform info
      if: ${{ github.event.inputs.debug_enabled == 'true' }}
      run: |
        Write-Host "=== Platform Information ==="
        Write-Host "Platform: Windows"
        Write-Host "OS: windows-latest"
        Write-Host "Working directory: $(Get-Location)"
        Write-Host "Manuscript path: $env:MANUSCRIPT_PATH"
        Write-Host "=== Directory Contents ==="
        Get-ChildItem -Force | Format-Table -AutoSize
        Write-Host "=== PATH Environment ==="
        $env:PATH -split ';' | ForEach-Object { Write-Host $_ }
      shell: pwsh

    # Test PDF generation without figure regeneration or cleanup
    - name: Test PDF generation
      run: |
        Write-Host "Testing PDF generation for: $env:MANUSCRIPT_PATH"
        
        Write-Host "Creating output directory..."
        if (!(Test-Path "output")) {
          New-Item -ItemType Directory -Path "output" -Force
        }
        
        Write-Host "Generating PDF (skipping figure regeneration)..."
        make pdf MANUSCRIPT_PATH=$env:MANUSCRIPT_PATH
        Write-Host "✅ PDF generation completed"
      shell: pwsh

    # Verify PDF generation
    - name: Verify PDF generation
      run: |
        Write-Host "Verifying PDF generation..."
        $pdfPath = "output\$env:MANUSCRIPT_PATH.pdf"
        Write-Host "Looking for PDF at: $pdfPath"
        
        if (Test-Path $pdfPath) {
          Write-Host "✅ PDF generated successfully: $pdfPath"
          $pdfInfo = Get-Item $pdfPath
          Write-Host "File size: $($pdfInfo.Length) bytes"
          Write-Host "Created: $($pdfInfo.CreationTime)"
          Write-Host "Modified: $($pdfInfo.LastWriteTime)"
        } else {
          Write-Host "❌ ERROR: PDF not found at $pdfPath"
          Write-Host "Contents of output directory:"
          if (Test-Path "output") {
            Get-ChildItem -Path "output" -Recurse | Format-Table -AutoSize
          } else {
            Write-Host "❌ Output directory not found"
          }
          
          Write-Host "Checking for LaTeX log files:"
          Get-ChildItem -Path "output" -Filter "*.log" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "=== $($_.Name) ==="
            Get-Content $_.FullName -Tail 50
          }
          exit 1
        }
      shell: pwsh

    # Upload artifacts for debugging
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-output-${{ github.run_number }}
        path: |
          output/
        retention-days: 7

    - name: Final status report
      if: always()
      run: |
        Write-Host "=== Windows Setup Test Summary ==="
        Write-Host "Manuscript: $env:MANUSCRIPT_PATH"
        Write-Host "Workflow: ${{ github.workflow }}"
        Write-Host "Run ID: ${{ github.run_id }}"
        Write-Host "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
        
        $pdfPath = "output\$env:MANUSCRIPT_PATH.pdf"
        if (Test-Path $pdfPath) {
          Write-Host "Status: ✅ SUCCESS - PDF generated successfully"
        } else {
          Write-Host "Status: ❌ FAILURE - PDF not generated"
        }
        Write-Host "================================="
      shell: pwsh