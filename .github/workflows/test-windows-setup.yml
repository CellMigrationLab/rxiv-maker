name: Test Windows LaTeX PDF Generation

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean
      manuscript_path:
        description: 'Path to manuscript directory'
        required: false
        default: 'EXAMPLE_MANUSCRIPT'
        type: string

jobs:
  test-windows-latex:
    runs-on: windows-latest
    env:
      MANUSCRIPT_PATH: ${{ github.event.inputs.manuscript_path || 'EXAMPLE_MANUSCRIPT' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set manuscript path
      run: |
        $manuscriptPath = "${{ github.event.inputs.manuscript_path }}"
        if ([string]::IsNullOrEmpty($manuscriptPath)) {
          $manuscriptPath = "EXAMPLE_MANUSCRIPT"
        }
        Write-Host "Using manuscript path: $manuscriptPath"
        echo "MANUSCRIPT_PATH=$manuscriptPath" >> $env:GITHUB_ENV
      shell: pwsh

    # Install MiKTeX directly (more reliable on Windows)
    - name: Install MiKTeX
      run: |
        Write-Host "Installing MiKTeX..."
        try {
          Write-Host "Using chocolatey to install MiKTeX..."
          choco install miktex -y --timeout=3600
          Write-Host "✅ MiKTeX installed successfully"
          
          # Add MiKTeX to PATH
          $miktexPath = "${env:ProgramFiles}\MiKTeX\miktex\bin\x64"
          if (Test-Path $miktexPath) {
            echo "$miktexPath" >> $env:GITHUB_PATH
            Write-Host "✅ MiKTeX added to PATH: $miktexPath"
          } else {
            Write-Host "⚠️ MiKTeX path not found, checking alternative locations..."
            $altPaths = @(
              "${env:ProgramFiles}\MiKTeX\miktex\bin",
              "${env:ProgramFiles(x86)}\MiKTeX\miktex\bin\x64",
              "${env:ProgramFiles(x86)}\MiKTeX\miktex\bin"
            )
            foreach ($path in $altPaths) {
              if (Test-Path $path) {
                echo "$path" >> $env:GITHUB_PATH
                Write-Host "✅ MiKTeX found at: $path"
                $miktexPath = $path
                break
              }
            }
          }
          
          # Initialize MiKTeX package database
          Write-Host "Initializing MiKTeX package database..."
          & "$miktexPath\miktex.exe" --admin --configure
          Write-Host "✅ MiKTeX configured"
          
        } catch {
          Write-Host "❌ MiKTeX installation failed: $_"
          Write-Host "Continuing with system LaTeX if available..."
        }
      shell: pwsh
      continue-on-error: true

    # Cache uv installation for Python package management
    - name: Cache uv installation
      uses: actions/cache@v4
      with:
        path: ~\.local\bin
        key: ${{ runner.os }}-uv-${{ hashFiles('.github/workflows/test-windows-setup.yml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install uv package manager
      run: |
        Write-Host "Installing uv..."
        powershell -Command "irm https://astral.sh/uv/install.ps1 | iex"
        $uvPath = "$env:USERPROFILE\.local\bin"
        echo "$uvPath" >> $env:GITHUB_PATH
        Write-Host "✅ uv installation completed at: $uvPath"
      shell: pwsh

    # Setup Makefile environment for GitHub Actions (avoid shell syntax issues)
    - name: Setup Makefile environment for GitHub Actions
      run: |
        Write-Host "Setting up Makefile environment variables for GitHub Actions..."
        # GitHub Actions uses bash even on Windows, so force Unix-style detection
        echo "MAKEFILE_FORCE_UNIX=1" >> $env:GITHUB_ENV
        echo "SHELL=/bin/bash" >> $env:GITHUB_ENV
        Write-Host "✅ Makefile environment configured for GitHub Actions"
      shell: pwsh

    # Cache virtual environment
    - name: Cache virtual environment
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-venv-${{ hashFiles('pyproject.toml', 'requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-venv-

    - name: Verify tools installation
      run: |
        Write-Host "=== Verifying Tools Installation ==="
        
        # Test uv
        try {
          $uvVersion = uv --version
          Write-Host "✅ uv is available: $uvVersion"
        } catch {
          Write-Host "⚠️ uv not found: $_"
        }
        
        # Test LaTeX - comprehensive verification
        $latexFound = $false
        $latexCommands = @("pdflatex", "latex", "xelatex", "lualatex")
        foreach ($cmd in $latexCommands) {
          try {
            $result = & $cmd --version 2>&1
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ $cmd is available"
              $latexFound = $true
              # Show version info for main LaTeX command
              if ($cmd -eq "pdflatex") {
                Write-Host "   Version: $($result[0])"
              }
            }
          } catch {
            Write-Host "⚠️ $cmd not found: $_"
          }
        }
        
        # Test critical LaTeX packages
        if ($latexFound) {
          Write-Host "=== Testing Critical LaTeX Packages ==="
          $testPackages = @("amsmath", "graphicx", "hyperref", "geometry", "authblk")
          foreach ($pkg in $testPackages) {
            try {
              $testLatex = @"
\documentclass{article}
\usepackage{$pkg}
\begin{document}
Test
\end{document}
"@
              $testLatex | Out-File -FilePath "test_$pkg.tex" -Encoding utf8
              $result = pdflatex -interaction=nonstopmode "test_$pkg.tex" 2>&1
              if ($LASTEXITCODE -eq 0) {
                Write-Host "✅ Package $pkg works"
              } else {
                Write-Host "⚠️ Package $pkg may have issues"
              }
              Remove-Item "test_$pkg.*" -Force -ErrorAction SilentlyContinue
            } catch {
              Write-Host "⚠️ Could not test package $pkg: $_"
            }
          }
        }
        
        # Test bibliography tools
        $bibTools = @("bibtex", "biber")
        foreach ($tool in $bibTools) {
          try {
            $result = & $tool --version 2>&1
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ $tool is available"
            }
          } catch {
            Write-Host "⚠️ $tool not found: $_"
          }
        }
        
        if (-not $latexFound) {
          Write-Host "❌ ERROR: LaTeX installation could not be verified"
          Write-Host "Available PATH entries:"
          $env:PATH -split ';' | ForEach-Object { Write-Host "  $_" }
          exit 1
        }
        
        Write-Host "=== Tool Verification Complete ==="
      shell: pwsh

    - name: Setup Python environment
      run: |
        Write-Host "Setting up Python environment..."
        try {
          $env:UV_SYSTEM_PYTHON = "1"
          make setup
          Write-Host "✅ Python environment setup completed"
        } catch {
          Write-Host "⚠️ Python environment setup failed: $_"
        }
      shell: pwsh

    # Debug information (only when debug mode is enabled)
    - name: Debug - Show platform info
      if: ${{ github.event.inputs.debug_enabled == 'true' }}
      run: |
        Write-Host "=== Platform Information ==="
        Write-Host "Platform: Windows"
        Write-Host "OS: windows-latest"
        Write-Host "Working directory: $(Get-Location)"
        Write-Host "Manuscript path: $env:MANUSCRIPT_PATH"
        Write-Host "=== Directory Contents ==="
        Get-ChildItem -Force | Format-Table -AutoSize
        Write-Host "=== PATH Environment ==="
        $env:PATH -split ';' | ForEach-Object { Write-Host $_ }
      shell: pwsh

    # Test PDF generation with comprehensive error handling
    - name: Test PDF generation
      run: |
        Write-Host "Testing PDF generation for: $env:MANUSCRIPT_PATH"
        
        # Pre-flight checks
        Write-Host "=== Pre-flight Checks ==="
        if (!(Test-Path $env:MANUSCRIPT_PATH)) {
          Write-Host "❌ ERROR: Manuscript directory not found: $env:MANUSCRIPT_PATH"
          Write-Host "Available directories:"
          Get-ChildItem -Directory | ForEach-Object { Write-Host "  $($_.Name)" }
          exit 1
        }
        
        Write-Host "✅ Manuscript directory exists: $env:MANUSCRIPT_PATH"
        
        # Check for required manuscript files
        $requiredFiles = @("00_CONFIG.yml", "01_MAIN.md", "03_REFERENCES.bib")
        foreach ($file in $requiredFiles) {
          $filePath = Join-Path $env:MANUSCRIPT_PATH $file
          if (Test-Path $filePath) {
            Write-Host "✅ Found required file: $file"
          } else {
            Write-Host "⚠️ Missing file: $file"
          }
        }
        
        Write-Host "Creating output directory..."
        if (!(Test-Path "output")) {
          New-Item -ItemType Directory -Path "output" -Force
        }
        
        Write-Host "=== PDF Generation ==="
        try {
          Write-Host "Generating PDF (skipping figure regeneration)..."
          $makeResult = make pdf MANUSCRIPT_PATH=$env:MANUSCRIPT_PATH 2>&1
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ PDF generation completed successfully"
            Write-Host "Make output:"
            Write-Host $makeResult
          } else {
            Write-Host "❌ PDF generation failed with exit code: $LASTEXITCODE"
            Write-Host "Make output:"
            Write-Host $makeResult
            
            # Check for LaTeX log files with errors
            Write-Host "=== LaTeX Error Analysis ==="
            $logFiles = Get-ChildItem -Path "output" -Filter "*.log" -ErrorAction SilentlyContinue
            foreach ($logFile in $logFiles) {
              Write-Host "--- Checking $($logFile.Name) ---"
              $logContent = Get-Content $logFile.FullName
              $errorLines = $logContent | Where-Object { $_ -match "^!" -or $_ -match "Error" -or $_ -match "Fatal" }
              if ($errorLines) {
                Write-Host "LaTeX Errors found:"
                $errorLines | ForEach-Object { Write-Host "  $_" }
              }
            }
            
            exit 1
          }
        } catch {
          Write-Host "❌ PDF generation failed with exception: $_"
          exit 1
        }
      shell: pwsh

    # Verify PDF generation
    - name: Verify PDF generation
      run: |
        Write-Host "Verifying PDF generation..."
        $pdfPath = "output\$env:MANUSCRIPT_PATH.pdf"
        Write-Host "Looking for PDF at: $pdfPath"
        
        if (Test-Path $pdfPath) {
          Write-Host "✅ PDF generated successfully: $pdfPath"
          $pdfInfo = Get-Item $pdfPath
          Write-Host "File size: $($pdfInfo.Length) bytes"
          Write-Host "Created: $($pdfInfo.CreationTime)"
          Write-Host "Modified: $($pdfInfo.LastWriteTime)"
        } else {
          Write-Host "❌ ERROR: PDF not found at $pdfPath"
          Write-Host "Contents of output directory:"
          if (Test-Path "output") {
            Get-ChildItem -Path "output" -Recurse | Format-Table -AutoSize
          } else {
            Write-Host "❌ Output directory not found"
          }
          
          Write-Host "Checking for LaTeX log files:"
          Get-ChildItem -Path "output" -Filter "*.log" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "=== $($_.Name) ==="
            Get-Content $_.FullName -Tail 50
          }
          exit 1
        }
      shell: pwsh

    # Upload artifacts for debugging
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-output-${{ github.run_number }}
        path: |
          output/
        retention-days: 7

    - name: Final status report
      if: always()
      run: |
        Write-Host "=== Windows Setup Test Summary ==="
        Write-Host "Manuscript: $env:MANUSCRIPT_PATH"
        Write-Host "Workflow: ${{ github.workflow }}"
        Write-Host "Run ID: ${{ github.run_id }}"
        Write-Host "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
        
        $pdfPath = "output\$env:MANUSCRIPT_PATH.pdf"
        if (Test-Path $pdfPath) {
          Write-Host "Status: ✅ SUCCESS - PDF generated successfully"
        } else {
          Write-Host "Status: ❌ FAILURE - PDF not generated"
        }
        Write-Host "================================="
      shell: pwsh