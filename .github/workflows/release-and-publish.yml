name: Release and Publish

on:
  workflow_dispatch:
    inputs:
      publish-target:
        description: 'Publishing target'
        required: true
        default: 'pypi'
        type: choice
        options:
          - 'pypi'
          - 'testpypi'
          - 'both'
      create-release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean
      notify-package-managers:
        description: 'Notify package managers (Homebrew, Scoop)'
        required: false
        default: true
        type: boolean
      skip-tests:
        description: 'Skip pre-publishing tests'
        required: false
        default: false
        type: boolean

permissions:
  # IMPORTANT: this permission is mandatory for trusted publishing
  id-token: write
  contents: write
  actions: read

env:
  FORCE_COLOR: 1

jobs:
  setup:
    name: Setup Release Configuration
    runs-on: ubuntu-latest
    outputs:
      publish-pypi: ${{ steps.config.outputs.publish-pypi }}
      publish-testpypi: ${{ steps.config.outputs.publish-testpypi }}
      create-release: ${{ steps.config.outputs.create-release }}
      notify-package-managers: ${{ steps.config.outputs.notify-package-managers }}
      run-tests: ${{ steps.config.outputs.run-tests }}

    steps:
      - name: Configure release parameters
        id: config
        run: |
          # Configure publishing targets
          case "${{ inputs.publish-target }}" in
            "pypi")
              echo "publish-pypi=true" >> $GITHUB_OUTPUT
              echo "publish-testpypi=false" >> $GITHUB_OUTPUT
              ;;
            "testpypi")
              echo "publish-pypi=false" >> $GITHUB_OUTPUT
              echo "publish-testpypi=true" >> $GITHUB_OUTPUT
              ;;
            "both")
              echo "publish-pypi=true" >> $GITHUB_OUTPUT
              echo "publish-testpypi=true" >> $GITHUB_OUTPUT
              ;;
          esac

          # Other configurations
          echo "create-release=${{ inputs.create-release }}" >> $GITHUB_OUTPUT
          echo "notify-package-managers=${{ inputs.notify-package-managers }}" >> $GITHUB_OUTPUT
          echo "run-tests=${{ inputs.skip-tests == false }}" >> $GITHUB_OUTPUT

          echo "## Release Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Publish Target**: ${{ inputs.publish-target }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Create Release**: ${{ inputs.create-release }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Notify Package Managers**: ${{ inputs.notify-package-managers }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Tests**: ${{ inputs.skip-tests == false }}" >> $GITHUB_STEP_SUMMARY

  build:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for versioning
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build hatch twine

      - name: Build package
        run: |
          python -m build --sdist --wheel --outdir dist/

      - name: Check package contents
        run: |
          python -m twine check dist/*

      - name: List package contents
        run: |
          echo "## Package Contents" >> $GITHUB_STEP_SUMMARY
          echo "### Source Distribution" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          tar -tzf dist/*.tar.gz | head -20 >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "### Wheel Distribution" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          python -m zipfile -l dist/*.whl | head -20 >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 30

  test-package:
    name: Test Package Installation
    needs: [setup, build]
    runs-on: ${{ matrix.os }}
    if: needs.setup.outputs.run-tests == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Test wheel installation
        run: |
          python -m pip install --upgrade pip

          # Find and install the wheel file (cross-platform compatible)
          if ls dist/*.whl 1> /dev/null 2>&1; then
            python -m pip install dist/*.whl
          else
            echo "No wheel file found, installing from source"
            python -m pip install .
          fi
        shell: bash

      - name: Test CLI functionality
        run: |
          # Test basic CLI commands
          rxiv --version
          rxiv --help

          # Test Python module import
          python -c "import rxiv_maker; print('✅ Package imported successfully')"
          python -c "from rxiv_maker import __version__; print(f'Version: {__version__}')"
        env:
          # Force UTF-8 encoding on Windows to prevent UnicodeEncodeError
          PYTHONIOENCODING: utf-8
          PYTHONLEGACYWINDOWSFSENCODING: utf-8

      - name: Test with clean virtual environment
        run: |
          python -m venv test-env

          # Activate virtual environment (platform-specific)
          if [ "${{ runner.os }}" = "Windows" ]; then
            source test-env/Scripts/activate
          else
            source test-env/bin/activate
          fi

          # Install and test
          python -m pip install --upgrade pip

          # Find and install the wheel file (cross-platform compatible)
          if ls dist/*.whl 1> /dev/null 2>&1; then
            python -m pip install dist/*.whl
          else
            echo "No wheel file found, installing from source"
            python -m pip install .
          fi

          rxiv --version

          # Deactivate
          deactivate
        shell: bash
        env:
          # Force UTF-8 encoding on Windows to prevent UnicodeEncodeError
          PYTHONIOENCODING: utf-8
          PYTHONLEGACYWINDOWSFSENCODING: utf-8

  publish-to-testpypi:
    name: Publish to TestPyPI
    needs: [setup, build, test-package]
    runs-on: ubuntu-latest
    if: needs.setup.outputs.publish-testpypi == 'true' && (needs.test-package.result == 'success' || needs.setup.outputs.run-tests == 'false') && github.ref == 'refs/heads/main'

    environment:
      name: testpypi
      url: https://test.pypi.org/p/rxiv-maker

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          print-hash: true
          verbose: true

      - name: Create TestPyPI summary
        run: |
          echo "## TestPyPI Publication Summary" >> $GITHUB_STEP_SUMMARY
          echo "📦 Package published to TestPyPI successfully!" >> $GITHUB_STEP_SUMMARY
          echo "🔗 View package: https://test.pypi.org/p/rxiv-maker" >> $GITHUB_STEP_SUMMARY
          echo "📥 Install with: \`pip install --index-url https://test.pypi.org/simple/ rxiv-maker\`" >> $GITHUB_STEP_SUMMARY

  publish-to-pypi:
    name: Publish to PyPI
    needs: [setup, build, test-package]
    runs-on: ubuntu-latest
    if: needs.setup.outputs.publish-pypi == 'true' && (needs.test-package.result == 'success' || needs.setup.outputs.run-tests == 'false') && github.ref == 'refs/heads/main'

    environment:
      name: pypi
      url: https://pypi.org/p/rxiv-maker

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verbose: true

      - name: Create PyPI summary
        run: |
          echo "## PyPI Publication Summary" >> $GITHUB_STEP_SUMMARY
          echo "🎉 Package published to PyPI successfully!" >> $GITHUB_STEP_SUMMARY
          echo "🔗 View package: https://pypi.org/p/rxiv-maker" >> $GITHUB_STEP_SUMMARY
          echo "📥 Install with: \`pip install rxiv-maker\`" >> $GITHUB_STEP_SUMMARY

  create-github-release:
    name: Create GitHub Release
    needs: [setup, build, publish-to-pypi]
    runs-on: ubuntu-latest
    if: needs.setup.outputs.create-release == 'true' && needs.publish-to-pypi.result == 'success'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Get version from package
        id: get_version
        run: |
          # Extract version from wheel filename
          WHEEL_FILE=$(ls dist/*.whl)
          VERSION=$(echo $WHEEL_FILE | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.tag }}
          name: "Release ${{ steps.get_version.outputs.tag }}"
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: false
          make_latest: true
          body: |
            ## 🎉 Release ${{ steps.get_version.outputs.tag }}

            ### 📦 Installation
            ```bash
            pip install rxiv-maker==${{ steps.get_version.outputs.version }}
            ```

            ### 🔗 Links
            - **PyPI**: https://pypi.org/project/rxiv-maker/${{ steps.get_version.outputs.version }}/
            - **Documentation**: https://github.com/henriqueslab/rxiv-maker#readme
            - **Changelog**: https://github.com/henriqueslab/rxiv-maker/blob/main/CHANGELOG.md

            ### 📥 Package Downloads
            - **Wheel**: [rxiv_maker-${{ steps.get_version.outputs.version }}-py3-none-any.whl](https://github.com/henriqueslab/rxiv-maker/releases/download/${{ steps.get_version.outputs.tag }}/rxiv_maker-${{ steps.get_version.outputs.version }}-py3-none-any.whl)
            - **Source**: [rxiv_maker-${{ steps.get_version.outputs.version }}.tar.gz](https://github.com/henriqueslab/rxiv-maker/releases/download/${{ steps.get_version.outputs.tag }}/rxiv_maker-${{ steps.get_version.outputs.version }}.tar.gz)

  notify-package-managers:
    name: Notify Package Managers
    needs: [setup, publish-to-pypi, create-github-release]
    runs-on: ubuntu-latest
    if: needs.setup.outputs.notify-package-managers == 'true' && needs.publish-to-pypi.result == 'success'

    steps:
      - name: Trigger Homebrew update
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = { owner: 'henriqueslab', repo: 'homebrew-rxiv-maker' };

            // Retry logic for API calls
            let attempts = 0;
            const maxAttempts = 3;
            let delay = 5000; // 5 seconds

            while (attempts < maxAttempts) {
              attempts++;
              try {
                console.log(`🔄 Attempt ${attempts} of ${maxAttempts} to trigger Homebrew update...`);
                await github.rest.actions.createWorkflowDispatch({
                  owner,
                  repo,
                  workflow_id: 'update-formula.yml',
                  ref: 'main'
                });
                console.log('✅ Homebrew update triggered successfully');
                break;
              } catch (error) {
                console.error(`❌ Attempt ${attempts} failed:`, error.message);
                if (attempts < maxAttempts) {
                  console.log(`⏳ Waiting ${delay/1000}s before retry...`);
                  await new Promise(resolve => setTimeout(resolve, delay));
                  delay *= 2; // Exponential backoff
                } else {
                  console.error('❌ All attempts to trigger Homebrew update failed');
                  // Don't fail the workflow for this
                }
              }
            }

      - name: Trigger Scoop update
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = { owner: 'henriqueslab', repo: 'scoop-rxiv-maker' };

            // Retry logic for API calls
            let attempts = 0;
            const maxAttempts = 3;
            let delay = 5000; // 5 seconds

            while (attempts < maxAttempts) {
              attempts++;
              try {
                console.log(`🔄 Attempt ${attempts} of ${maxAttempts} to trigger Scoop update...`);
                await github.rest.actions.createWorkflowDispatch({
                  owner,
                  repo,
                  workflow_id: 'update-formula.yml',
                  ref: 'main'
                });
                console.log('✅ Scoop update triggered successfully');
                break;
              } catch (error) {
                console.error(`❌ Attempt ${attempts} failed:`, error.message);
                if (attempts < maxAttempts) {
                  console.log(`⏳ Waiting ${delay/1000}s before retry...`);
                  await new Promise(resolve => setTimeout(resolve, delay));
                  delay *= 2; // Exponential backoff
                } else {
                  console.error('❌ All attempts to trigger Scoop update failed');
                  // Don't fail the workflow for this
                }
              }
            }

      - name: Create notification summary
        run: |
          echo "## Package Manager Notifications" >> $GITHUB_STEP_SUMMARY
          echo "🍺 Homebrew update workflow triggered" >> $GITHUB_STEP_SUMMARY
          echo "🪣 Scoop update workflow triggered" >> $GITHUB_STEP_SUMMARY
          echo "📝 Package managers will automatically update their formulas" >> $GITHUB_STEP_SUMMARY

  summary:
    name: Release Summary
    needs: [setup, build, test-package, publish-to-testpypi, publish-to-pypi, create-github-release, notify-package-managers]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Generate release summary
        run: |
          echo "# Release and Publish Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Publish Target**: ${{ inputs.publish-target }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tests Run**: ${{ needs.setup.outputs.run-tests }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Build status
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "✅ **Package Build**: Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Package Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Test status
          if [ "${{ needs.setup.outputs.run-tests }}" = "true" ]; then
            if [ "${{ needs.test-package.result }}" = "success" ]; then
              echo "✅ **Package Testing**: All platforms passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Package Testing**: Some platforms failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Package Testing**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          # TestPyPI status
          if [ "${{ needs.setup.outputs.publish-testpypi }}" = "true" ]; then
            if [ "${{ needs.publish-to-testpypi.result }}" = "success" ]; then
              echo "✅ **TestPyPI**: Published successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **TestPyPI**: Publication failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **TestPyPI**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          # PyPI status
          if [ "${{ needs.setup.outputs.publish-pypi }}" = "true" ]; then
            if [ "${{ needs.publish-to-pypi.result }}" = "success" ]; then
              echo "✅ **PyPI**: Published successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **PyPI**: Publication failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **PyPI**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          # GitHub release status
          if [ "${{ needs.setup.outputs.create-release }}" = "true" ]; then
            if [ "${{ needs.create-github-release.result }}" = "success" ]; then
              echo "✅ **GitHub Release**: Created successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **GitHub Release**: Creation failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **GitHub Release**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          # Package manager notifications
          if [ "${{ needs.setup.outputs.notify-package-managers }}" = "true" ]; then
            if [ "${{ needs.notify-package-managers.result }}" = "success" ]; then
              echo "✅ **Package Managers**: Notified successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Package Managers**: Notification failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Package Managers**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
