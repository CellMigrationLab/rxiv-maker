name: Build and Release PDF

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      manuscript_path:
        description: 'Path to manuscript directory (e.g., MANUSCRIPT, EXAMPLE_MANUSCRIPT, or custom path)'
        required: false
        default: 'MANUSCRIPT'
        type: string

jobs:
  # First job: Determine which manuscript directory to use
  prepare:
    runs-on: ubuntu-latest
    outputs:
      manuscript_path: ${{ steps.set-path.outputs.manuscript_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set manuscript path
        id: set-path
        run: |
          # Load environment variables from .env file if it exists
          if [ -f ".env" ]; then
            set -a
            source .env
            set +a
          fi

          # Determine manuscript path based on trigger type
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger: use user-provided path
            MANUSCRIPT_PATH="${{ github.event.inputs.manuscript_path }}"
          else
            # Tag trigger: use .env file value or fallback to EXAMPLE_MANUSCRIPT
            MANUSCRIPT_PATH="${MANUSCRIPT_PATH:-EXAMPLE_MANUSCRIPT}"
          fi

          echo "Using manuscript path: $MANUSCRIPT_PATH"
          echo "manuscript_path=$MANUSCRIPT_PATH" >> $GITHUB_OUTPUT

  # Second job: Build the PDF document
  build-pdf:
    needs: prepare
    runs-on: ubuntu-latest
    container: henriqueslab/rxiv-maker-base:latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set manuscript path from prepare job
      run: |
        echo "MANUSCRIPT_PATH=${{ needs.prepare.outputs.manuscript_path }}" >> $GITHUB_ENV
        echo "Using manuscript path: ${{ needs.prepare.outputs.manuscript_path }}"

    # Cache Python dependencies and virtual environment
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-python-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-

    # Install Python dependencies (system dependencies already in Docker image)
    - name: Install Python dependencies
      run: |
        echo "Installing Python dependencies..."

        # Use make setup for dependency installation (optimized for the project)
        make setup

        # Set up a writable R library directory (already exists in Docker image)
        echo 'R_LIBS_USER="~/.R/library"' >> ~/.Renviron

    # Cache R library directory
    - name: Cache R packages
      uses: actions/cache@v4
      with:
        path: ~/.R/library
        key: ${{ runner.os }}-r-${{ hashFiles('**/DESCRIPTION') }}
        restore-keys: |
          ${{ runner.os }}-r-

    # Cache LaTeX build outputs from previous runs
    - name: Cache LaTeX outputs
      uses: actions/cache@v4
      with:
        path: |
          output/*.aux
          output/*.bbl
          output/*.blg
          output/*.toc
          output/*.out
        key: ${{ runner.os }}-latex-${{ hashFiles('${{ needs.prepare.outputs.manuscript_path }}/**/*.md', '${{ needs.prepare.outputs.manuscript_path }}/**/*.bib', '${{ needs.prepare.outputs.manuscript_path }}/**/*.yml') }}
        restore-keys: |
          ${{ runner.os }}-latex-

    # Cache processed figures
    - name: Cache processed figures
      uses: actions/cache@v4
      with:
        path: |
          ${{ needs.prepare.outputs.manuscript_path }}/FIGURES/*/
          cache/figures
        key: ${{ runner.os }}-figures-${{ hashFiles('${{ needs.prepare.outputs.manuscript_path }}/FIGURES/**/*') }}
        restore-keys: |
          ${{ runner.os }}-figures-

    - name: Generate PDF
      env:
        R_LIBS_USER: ~/.R/library
      run: |
        echo "✅ Running PDF generation"

        # Set up environment
        export MANUSCRIPT_PATH=${{ needs.prepare.outputs.manuscript_path }}
        export TEXMFVAR=/tmp/texmf-var
        export FORCE_FIGURES=true

        # Create necessary directories
        mkdir -p /tmp/texmf-var output

        # Run the build
        make clean-figures
        make pdf

    - name: Check PDF generation
      run: |
        echo "Checking output directory contents..."
        ls -la output/ || echo "Output directory not found"

        PDF_PATH="output/${MANUSCRIPT_PATH}.pdf"

        if [ -f "$PDF_PATH" ]; then
          echo "✅ PDF generated successfully: $PDF_PATH"
          ls -la "$PDF_PATH"
          file "$PDF_PATH"
        else
          echo "❌ ERROR: PDF not found at $PDF_PATH"
          echo "Contents of output directory:"
          find output/ -type f 2>/dev/null || echo "No files found in output/"

          echo "Checking for LaTeX log files:"
          find output/ -name "*.log" -exec echo "=== {} ===" \; -exec tail -50 {} \; 2>/dev/null || echo "No log files found"
          exit 1
        fi

    - name: Prepare release assets
      id: prepare-release
      run: |
        # Create release directory
        mkdir -p release

        # Copy PDF with descriptive name
        MANUSCRIPT_DIR="${{ needs.prepare.outputs.manuscript_path }}"
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/_/g')

        # Use the existing PDF if it has a custom name, otherwise use generic name
        if [ -f "${MANUSCRIPT_DIR}"/*.pdf ]; then
          PDF_NAME=$(ls "${MANUSCRIPT_DIR}"/*.pdf | head -1 | xargs basename)
          cp "${MANUSCRIPT_DIR}/${PDF_NAME}" "release/${PDF_NAME}"
        else
          PDF_NAME="manuscript_${BRANCH_NAME}_${TIMESTAMP}.pdf"
          cp "output/MANUSCRIPT.pdf" "release/${PDF_NAME}"
        fi

        # Set output for later steps
        echo "PDF_NAME=${PDF_NAME}" >> $GITHUB_OUTPUT
        echo "PDF_FILENAME=${PDF_NAME}" >> $GITHUB_ENV

        # Create build info
        cat > release/build_info.txt << EOF
        Build Information:
        - Repository: ${{ github.repository }}
        - Branch: ${{ github.ref_name }}
        - Commit: ${{ github.sha }}
        - Manuscript Path: ${{ needs.prepare.outputs.manuscript_path }}
        - Build Date: $(date)
        - Workflow: ${{ github.workflow }}
        - Run ID: ${{ github.run_id }}
        EOF

    - name: Upload PDF as artifact
      uses: actions/upload-artifact@v4
      with:
        name: generated-pdf
        path: |
          release/*.pdf
          release/build_info.txt
        retention-days: 90

    - name: Get most recent tag
      id: get-tag
      run: |
        # For tag-triggered builds, use the triggering tag directly
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_type }}" = "tag" ]; then
          TAG="${{ github.ref_name }}"
          echo "Using triggering tag: $TAG"
        else
          # For manual triggers, fetch all tags and get the most recent one
          git fetch --tags
          TAG=$(git tag --sort=-creatordate | head -n 1)
          echo "Using most recent tag: $TAG"
        fi

        echo "MOST_RECENT_TAG=$TAG" >> $GITHUB_ENV
        echo "MOST_RECENT_TAG=$TAG" >> $GITHUB_OUTPUT

    - name: Determine release existence for MOST_RECENT_TAG
      id: tag-check
      run: |
        # Use the MOST_RECENT_TAG from environment
        echo "Checking release existence for tag: $MOST_RECENT_TAG"
        if [ -n "$MOST_RECENT_TAG" ]; then
          RELEASE_JSON=$(gh release view "$MOST_RECENT_TAG" --json tagName --jq '.tagName' 2>/dev/null || echo "")
          if [ "$RELEASE_JSON" = "$MOST_RECENT_TAG" ]; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "release_exists=false" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MOST_RECENT_TAG: ${{ env.MOST_RECENT_TAG }}

    - name: Create v0.0.1 tag if no tag exists (manual triggers only)
      if: env.MOST_RECENT_TAG == '' && github.event_name == 'workflow_dispatch' && github.event.repository.fork == false
      run: |
        echo "No tags found in manual trigger, creating initial v0.0.1 tag"
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag v0.0.1
        git push origin v0.0.1
        echo "MOST_RECENT_TAG=v0.0.1" >> $GITHUB_ENV

    - name: Set fallback tag for manual triggers without tags
      if: env.MOST_RECENT_TAG == '' && github.event_name == 'workflow_dispatch'
      run: |
        echo "Manual trigger with no existing tags"
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        FALLBACK_TAG="manual-build-${TIMESTAMP}"
        echo "Using fallback identifier: ${FALLBACK_TAG}"
        echo "MOST_RECENT_TAG=${FALLBACK_TAG}" >> $GITHUB_ENV

    - name: Set fallback tag for forks
      if: env.MOST_RECENT_TAG == '' && github.event.repository.fork == true
      run: |
        echo "Running on a fork, using fallback tag naming"
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        FALLBACK_TAG="fork-build-${TIMESTAMP}"
        echo "MOST_RECENT_TAG=${FALLBACK_TAG}" >> $GITHUB_ENV

    - name: Create release for most recent tag if missing (non-fork only)
      if: env.MOST_RECENT_TAG != '' && steps.tag-check.outputs.release_exists == 'false' && github.event.repository.fork == false
      run: |
        gh release create "${MOST_RECENT_TAG}" \
          release/*.pdf \
          release/build_info.txt \
          --title "Release ${MOST_RECENT_TAG}" \
          --notes "## 📄 PDF Build for Tag \`${MOST_RECENT_TAG}\`\nThis release was automatically created for the most recent tag."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MOST_RECENT_TAG: ${{ env.MOST_RECENT_TAG }}

    - name: Create or update most recent tag release (non-fork only)
      if: github.event.repository.fork == false
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.MOST_RECENT_TAG }}
        name: "Release ${{ env.MOST_RECENT_TAG }}"
        body: |
          ## 📄 PDF Build for Tag `${{ env.MOST_RECENT_TAG }}`

          **Manuscript:** `${{ needs.prepare.outputs.manuscript_path }}`
          **Branch:** `${{ github.ref_name }}`
          **Commit:** `${{ github.sha }}`
          **Build Date:** $(date)

          ### 📥 Download Links
          - **PDF:** [${{ steps.prepare-release.outputs.PDF_NAME }}](https://github.com/${{ github.repository }}/releases/download/${{ env.MOST_RECENT_TAG }}/${{ steps.prepare-release.outputs.PDF_NAME }})
          - **Build Info:** [build_info.txt](https://github.com/${{ github.repository }}/releases/download/${{ env.MOST_RECENT_TAG }}/build_info.txt)

          ### 🔗 Direct Download URL
          ```
          https://github.com/${{ github.repository }}/releases/latest/download/${{ steps.prepare-release.outputs.PDF_NAME }}
          ```

          ---
          *This release is automatically updated when a tagged commit is pushed or when the action is manually triggered.*
        files: |
          release/*.pdf
          release/build_info.txt

    - name: Fork notification
      if: github.event.repository.fork == true
      run: |
        echo "=================================================="
        echo "🍴 Fork Repository Detected"
        echo "=================================================="
        echo "This workflow is running on a forked repository."
        echo "PDF has been generated and uploaded as an artifact."
        echo "To access your PDF:"
        echo "1. Go to the Actions tab of your fork"
        echo "2. Click on this workflow run"
        echo "3. Download the 'generated-pdf' artifact"
        echo ""
        echo "Note: Releases cannot be created on forks due to"
        echo "GitHub permissions. The PDF is available as an"
        echo "workflow artifact for 90 days."
        echo "=================================================="
