name: Build and Release PDF

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      manuscript_path:
        description: 'Path to manuscript directory'
        required: false
        default: 'MANUSCRIPT'
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      manuscript_path: ${{ steps.set-path.outputs.manuscript_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set manuscript path
        id: set-path
        run: |
          # Load environment variables from .env file if it exists
          if [ -f ".env" ]; then
            set -a
            source .env
            set +a
          fi

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            MANUSCRIPT_PATH="${{ github.event.inputs.manuscript_path }}"
          else
            # Use the value from .env file or fallback to EXAMPLE_MANUSCRIPT
            MANUSCRIPT_PATH="${MANUSCRIPT_PATH:-EXAMPLE_MANUSCRIPT}"
          fi

          echo "Using manuscript path: $MANUSCRIPT_PATH"
          echo "manuscript_path=$MANUSCRIPT_PATH" >> $GITHUB_OUTPUT

  build-pdf:
    needs: prepare
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Setup Docker Buildx for better caching
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Cache Docker layers
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set manuscript path from prepare job
      run: |
        echo "MANUSCRIPT_PATH=${{ needs.prepare.outputs.manuscript_path }}" >> $GITHUB_ENV
        echo "Using manuscript path: ${{ needs.prepare.outputs.manuscript_path }}"

    - name: Pull Docker image with caching
      uses: docker/build-push-action@v5
      id: docker_build
      with:
        context: ./src/docker
        file: ./src/docker/Dockerfile
        push: false
        load: true
        tags: rxiv-maker:local
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    # Move cache to prevent cache growth
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Generate PDF
      run: |
        echo "Using locally built Docker image: rxiv-maker:local"

        # Cache the processed figures to speed up rebuilds
        mkdir -p ./cache/figures

        # Run with platform specification for GitHub Actions runners
        docker run --rm \
          --platform linux/amd64 \
          -v $(pwd):/app \
          -v $(pwd)/cache/figures:/app/output/Figures \
          -w /app \
          -e MANUSCRIPT_PATH=${{ needs.prepare.outputs.manuscript_path }} \
          -e TEXMFVAR=/tmp/texmf-var \
          -e FORCE_FIGURES=false \
          rxiv-maker:local \
          bash -c "mkdir -p /tmp/texmf-var && make _build_pdf"

    - name: Check PDF generation
      run: |
        echo "Checking output directory contents..."
        ls -la output/ || echo "Output directory not found"

        if [ -f "output/MANUSCRIPT.pdf" ]; then
          echo "✅ PDF generated successfully"
          ls -la output/MANUSCRIPT.pdf
          file output/MANUSCRIPT.pdf
        else
          echo "❌ ERROR: PDF not found in output directory"
          echo "Contents of output directory:"
          find output/ -type f 2>/dev/null || echo "No files found in output/"

          echo "Checking for LaTeX log files:"
          find output/ -name "*.log" -exec echo "=== {} ===" \; -exec tail -50 {} \; 2>/dev/null || echo "No log files found"
          exit 1
        fi

    - name: Prepare release assets
      id: prepare-release
      run: |
        # Create release directory
        mkdir -p release

        # Copy PDF with descriptive name
        MANUSCRIPT_DIR="${{ needs.prepare.outputs.manuscript_path }}"
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/_/g')

        # Use the existing PDF if it has a custom name, otherwise use generic name
        if [ -f "${MANUSCRIPT_DIR}"/*.pdf ]; then
          PDF_NAME=$(ls "${MANUSCRIPT_DIR}"/*.pdf | head -1 | xargs basename)
          cp "${MANUSCRIPT_DIR}/${PDF_NAME}" "release/${PDF_NAME}"
        else
          PDF_NAME="manuscript_${BRANCH_NAME}_${TIMESTAMP}.pdf"
          cp "output/MANUSCRIPT.pdf" "release/${PDF_NAME}"
        fi

        # Set output for later steps
        echo "PDF_NAME=${PDF_NAME}" >> $GITHUB_OUTPUT
        echo "PDF_FILENAME=${PDF_NAME}" >> $GITHUB_ENV

        # Create build info
        cat > release/build_info.txt << EOF
        Build Information:
        - Repository: ${{ github.repository }}
        - Branch: ${{ github.ref_name }}
        - Commit: ${{ github.sha }}
        - Manuscript Path: ${{ needs.prepare.outputs.manuscript_path }}
        - Build Date: $(date)
        - Workflow: ${{ github.workflow }}
        - Run ID: ${{ github.run_id }}
        EOF

    - name: Upload PDF as artifact
      uses: actions/upload-artifact@v4
      with:
        name: generated-pdf
        path: |
          release/*.pdf
          release/build_info.txt
        retention-days: 90

    - name: Create or update release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: latest-pdf
        name: "Latest PDF Build"
        body: |
          ## 📄 Latest PDF Build

          **Manuscript:** `${{ needs.prepare.outputs.manuscript_path }}`
          **Branch:** `${{ github.ref_name }}`
          **Commit:** `${{ github.sha }}`
          **Build Date:** $(date)

          ### 📥 Download Links
          - **PDF:** [${{ steps.prepare-release.outputs.PDF_NAME }}](https://github.com/${{ github.repository }}/releases/download/latest-pdf/${{ steps.prepare-release.outputs.PDF_NAME }})
          - **Build Info:** [build_info.txt](https://github.com/${{ github.repository }}/releases/download/latest-pdf/build_info.txt)

          ### 🔗 Direct Download URL
          ```
          https://github.com/${{ github.repository }}/releases/latest/download/${{ steps.prepare-release.outputs.PDF_NAME }}
          ```

          ---
          *This release is automatically updated when the main branch is pushed.*
        files: |
          release/*.pdf
          release/build_info.txt
        prerelease: false

    - name: Comment on commit (if applicable)
      if: github.event_name == 'push'
      run: |
        echo "✅ PDF successfully built and released!"
        echo "📥 Download: https://github.com/${{ github.repository }}/releases/latest/download/${{ steps.prepare-release.outputs.PDF_NAME }}"

    # Cache LaTeX build outputs
    - name: Cache LaTeX outputs
      uses: actions/cache@v4
      with:
        path: |
          output/*.aux
          output/*.bbl
          output/*.blg
          output/*.toc
        key: ${{ runner.os }}-latex-${{ hashFiles('MANUSCRIPT/**/*.md', 'MANUSCRIPT/**/*.bib') }}
        restore-keys: |
          ${{ runner.os }}-latex-

    # Cache the processed figures
    - name: Cache processed figures
      uses: actions/cache@v4
      with:
        path: ./cache/figures
        key: ${{ runner.os }}-figures-${{ hashFiles('MANUSCRIPT/FIGURES/**/*') }}
        restore-keys: |
          ${{ runner.os }}-figures-
