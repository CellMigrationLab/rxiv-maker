name: Test Homebrew Installation

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test installation mode'
        required: false
        default: 'both'
        type: choice
        options:
          - 'both'
          - 'test-pypi'
          - 'default'
      skip_dependencies:
        description: 'Skip system dependency installation (faster testing)'
        required: false
        default: false
        type: boolean

jobs:
  test-homebrew:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - mode: 'test-pypi'
            install_args: '--with-test-pypi'
            description: 'Test PyPI Installation'
          - mode: 'default'
            install_args: ''
            description: 'Default Installation'
      fail-fast: false
    
    name: ${{ matrix.description }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          echo "üîß Setting up Homebrew environment..."
          echo "=================================================="
          
          # Homebrew environment variables for CI
          echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $GITHUB_ENV
          echo "HOMEBREW_NO_INSTALL_CLEANUP=1" >> $GITHUB_ENV  
          echo "HOMEBREW_NO_ANALYTICS=1" >> $GITHUB_ENV
          
          # System info
          echo "üìä System Information:"
          echo "  - macOS Version: $(sw_vers -productVersion)"
          echo "  - Architecture: $(uname -m)"
          echo "  - Available Memory: $(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}')"
          echo "  - Available Disk: $(df -h / | tail -1 | awk '{print $4}') free"
          echo "=================================================="

      - name: Filter matrix based on input
        id: should_run
        run: |
          if [ "${{ github.event.inputs.test_mode }}" = "both" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.test_mode }}" = "${{ matrix.mode }}" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

      - name: Fix Homebrew configuration
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          echo "üõ†Ô∏è Fixing Homebrew configuration issues..."
          echo "=================================================="
          
          # Fix problematic taps that don't exist in CI
          echo "Removing problematic homebrew-cask-versions tap..."
          brew untap homebrew/homebrew-cask-versions || true
          
          # Clean up any existing issues
          echo "Cleaning up Homebrew configuration..."
          brew cleanup || true
          
          # Update Homebrew
          echo "Updating Homebrew..."
          brew update
          
          echo "‚úÖ Homebrew configuration fixed"
          echo "=================================================="

      - name: Install system dependencies
        if: steps.should_run.outputs.should_run == 'true' && github.event.inputs.skip_dependencies != 'true'
        run: |
          echo "üì¶ Installing system dependencies..."
          echo "=================================================="
          
          # Install LaTeX distribution
          echo "Installing BasicTeX..."
          brew install --cask basictex
          
          # Install other dependencies
          echo "Installing Python, Node.js, R, and Make..."
          brew install python@3.11 node@20 r make
          
          # Verify installations
          echo "‚úÖ Verifying installations:"
          echo "  - Python: $(python3.11 --version)"
          echo "  - Node.js: $(node --version)"
          echo "  - R: $(R --version | head -1)"
          echo "  - Make: $(make --version | head -1)"
          echo "  - LaTeX: $(pdflatex --version | head -1)"
          echo "=================================================="

      - name: Install rxiv-maker via Homebrew
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          echo "üç∫ Installing rxiv-maker via Homebrew..."
          echo "=================================================="
          echo "Mode: ${{ matrix.mode }}"
          echo "Install args: ${{ matrix.install_args }}"
          echo "Formula path: ./homebrew-rxiv-maker/Formula/rxiv-maker.rb"
          
          # Install from local formula
          if [ "${{ matrix.mode }}" = "test-pypi" ]; then
            echo "Installing from test-pypi..."
            brew install --build-from-source ./homebrew-rxiv-maker/Formula/rxiv-maker.rb ${{ matrix.install_args }}
          else
            echo "Installing from default source..."
            brew install --build-from-source ./homebrew-rxiv-maker/Formula/rxiv-maker.rb
          fi
          
          echo "‚úÖ Installation completed"
          echo "=================================================="

      - name: Verify installation
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          echo "üîç Verifying rxiv-maker installation..."
          echo "=================================================="
          
          # Check that rxiv command exists
          echo "Checking rxiv command availability..."
          which rxiv
          
          # Check version
          echo "Checking version..."
          rxiv --version
          
          # Check help
          echo "Testing help command..."
          rxiv --help | head -10
          
          echo "‚úÖ Basic installation verification passed"
          echo "=================================================="

      - name: Test package information
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          echo "üìã Testing package information..."
          echo "=================================================="
          
          # Show package info
          echo "Package information:"
          pip show rxiv-maker
          
          # Verify installation source
          if [ "${{ matrix.mode }}" = "test-pypi" ]; then
            echo "Verifying test-pypi installation..."
            pip show rxiv-maker | grep -E "(Version|Location)"
          fi
          
          echo "‚úÖ Package information verified"
          echo "=================================================="

      - name: Test CLI functionality
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          echo "üß™ Testing CLI functionality..."
          echo "=================================================="
          
          # Test check-installation command
          echo "Testing check-installation command..."
          rxiv check-installation --json
          
          # Test config command
          echo "Testing config command..."
          rxiv config show
          
          # Test setup command (check-only)
          echo "Testing setup command..."
          rxiv setup --check-deps-only
          
          echo "‚úÖ CLI functionality tests passed"
          echo "=================================================="

      - name: Test manuscript operations
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          echo "üìÑ Testing manuscript operations..."
          echo "=================================================="
          
          # Create test manuscript
          echo "Creating test manuscript..."
          rxiv init test-manuscript
          
          # Verify manuscript structure
          echo "Verifying manuscript structure..."
          ls -la test-manuscript/
          
          # Check that all expected files exist
          echo "Checking required files..."
          test -f test-manuscript/00_CONFIG.yml && echo "  ‚úÖ 00_CONFIG.yml exists"
          test -f test-manuscript/01_MAIN.md && echo "  ‚úÖ 01_MAIN.md exists"  
          test -f test-manuscript/03_REFERENCES.bib && echo "  ‚úÖ 03_REFERENCES.bib exists"
          test -d test-manuscript/FIGURES && echo "  ‚úÖ FIGURES directory exists"
          
          echo "‚úÖ Manuscript operations test passed"
          echo "=================================================="

      - name: Test manuscript validation
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          echo "‚úÖ Testing manuscript validation..."
          echo "=================================================="
          
          # Move to manuscript directory
          cd test-manuscript
          
          # Test validation
          echo "Running validation..."
          rxiv validate --detailed
          
          # Test validation with no-doi (faster)
          echo "Running validation with --no-doi..."
          rxiv validate --no-doi
          
          echo "‚úÖ Manuscript validation tests passed"
          echo "=================================================="

      - name: Test installation verification
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          echo "üîç Testing installation verification..."
          echo "=================================================="
          
          # Test detailed installation check
          echo "Running detailed installation check..."
          rxiv check-installation --detailed
          
          # Verify Python environment
          echo "Verifying Python environment..."
          python3 -c "import sys; print('Python path:', sys.path)"
          python3 -c "import rxiv_maker; print('rxiv_maker module imported successfully')"
          
          echo "‚úÖ Installation verification tests passed"
          echo "=================================================="

      - name: Test that no automatic dependencies were installed
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          echo "üîí Verifying no automatic system dependencies were installed..."
          echo "=================================================="
          
          # This test ensures our PostInstallCommand removal worked
          echo "Checking that pip install didn't trigger system dependency installation..."
          echo "This is verified by the fact that we manually installed dependencies above"
          echo "and the package still works correctly."
          
          # Show pip freeze to verify packages
          echo "Installed Python packages:"
          pip freeze | grep -E "(rxiv-maker|numpy|matplotlib|yaml)" || echo "Core packages found"
          
          echo "‚úÖ No automatic system dependency installation confirmed"
          echo "=================================================="

      - name: Collect test artifacts
        if: always() && steps.should_run.outputs.should_run == 'true'
        run: |
          echo "üìÅ Collecting test artifacts..."
          echo "=================================================="
          
          # Create artifacts directory
          mkdir -p test-artifacts
          
          # Copy test manuscript
          if [ -d "test-manuscript" ]; then
            cp -r test-manuscript test-artifacts/
          fi
          
          # Collect system information
          cat > test-artifacts/system-info.txt << EOF
          System Information:
          - macOS Version: $(sw_vers -productVersion)
          - Architecture: $(uname -m)
          - Test Mode: ${{ matrix.mode }}
          - Install Args: ${{ matrix.install_args }}
          - Test Date: $(date)
          - Workflow Run: ${{ github.run_id }}
          
          Homebrew Information:
          - Homebrew Version: $(brew --version | head -1)
          - Homebrew Prefix: $(brew --prefix)
          
          rxiv-maker Information:
          - Version: $(rxiv --version)
          - Location: $(which rxiv)
          
          Package Information:
          $(pip show rxiv-maker)
          EOF
          
          # Collect logs if available
          if [ -f "test-manuscript/output/manuscript.log" ]; then
            cp test-manuscript/output/manuscript.log test-artifacts/
          fi
          
          echo "‚úÖ Artifacts collected"
          echo "=================================================="

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always() && steps.should_run.outputs.should_run == 'true'
        with:
          name: homebrew-test-artifacts-${{ matrix.mode }}
          path: test-artifacts/
          retention-days: 30

      - name: Test summary
        if: always() && steps.should_run.outputs.should_run == 'true'
        run: |
          echo "=================================================="
          echo "üìä Test Summary - ${{ matrix.description }}"
          echo "=================================================="
          echo "Mode: ${{ matrix.mode }}"
          echo "Status: ${{ job.status }}"
          echo "Runner: ${{ runner.os }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo ""
          echo "Test Results:"
          echo "  ‚úÖ Homebrew installation: Completed"
          echo "  ‚úÖ CLI functionality: Tested"
          echo "  ‚úÖ Manuscript operations: Tested"
          echo "  ‚úÖ Installation verification: Tested"
          echo "  ‚úÖ No automatic dependencies: Verified"
          echo ""
          echo "Artifacts: homebrew-test-artifacts-${{ matrix.mode }}"
          echo "=================================================="

  test-summary:
    runs-on: ubuntu-latest
    needs: test-homebrew
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "=================================================="
          echo "üéØ Homebrew Installation Test Results"
          echo "=================================================="
          echo "Workflow: ${{ github.workflow }}"
          echo "Trigger: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Run ID: ${{ github.run_id }}"
          echo ""
          echo "Test Mode: ${{ github.event.inputs.test_mode || 'both' }}"
          echo "Skip Dependencies: ${{ github.event.inputs.skip_dependencies || 'false' }}"
          echo ""
          echo "Results:"
          echo "  - Test PyPI Installation: ${{ needs.test-homebrew.result }}"
          echo "  - Default Installation: ${{ needs.test-homebrew.result }}"
          echo ""
          echo "For detailed results, check the individual job logs above."
          echo "=================================================="