name: Streamlined Homebrew Formula Update

on:
  release:
    types: [published]

permissions:
  contents: read

env:
  HOMEBREW_TAP_REPO: HenriquesLab/homebrew-rxiv-maker
  FORMULA_FILE: Formula/rxiv-maker.rb

jobs:
  streamlined-homebrew-update:
    name: Direct Update Homebrew Formula
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Get release information
        id: release
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          TARBALL_URL="https://github.com/${{ github.repository }}/archive/refs/tags/${GITHUB_REF_NAME}.tar.gz"
          echo "tarball_url=$TARBALL_URL" >> $GITHUB_OUTPUT

          echo "📦 Release version: $VERSION"
          echo "🔗 Tarball URL: $TARBALL_URL"

      - name: Download and verify tarball
        id: sha256
        run: |
          echo "⬇️ Downloading and verifying release tarball..."
          curl -L -f -o rxiv-maker-${{ steps.release.outputs.version }}.tar.gz \
            "${{ steps.release.outputs.tarball_url }}"

          if [ ! -f "rxiv-maker-${{ steps.release.outputs.version }}.tar.gz" ]; then
            echo "❌ Failed to download tarball"
            exit 1
          fi

          SHA256=$(sha256sum rxiv-maker-${{ steps.release.outputs.version }}.tar.gz | cut -d' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "🔒 SHA256: $SHA256"

          # Verify tarball integrity
          tar -tzf rxiv-maker-${{ steps.release.outputs.version }}.tar.gz > /dev/null
          echo "✅ Tarball integrity verified"

      - name: Checkout Homebrew tap repository
        uses: actions/checkout@v5
        with:
          repository: ${{ env.HOMEBREW_TAP_REPO }}
          path: homebrew-tap
          token: ${{ secrets.HOMEBREW_UPDATE_TOKEN }}

      - name: Create backup and update formula
        working-directory: homebrew-tap
        run: |
          # Store current commit for rollback
          BACKUP_COMMIT=$(git rev-parse HEAD)
          echo "backup_commit=$BACKUP_COMMIT" >> $GITHUB_ENV
          echo "🔄 Backup commit: $BACKUP_COMMIT"

          # Create backup of current formula
          cp ${{ env.FORMULA_FILE }} formula.backup

          # Update formula
          echo "📝 Updating formula..."
          sed -i 's|url ".*"|url "${{ steps.release.outputs.tarball_url }}"|g' ${{ env.FORMULA_FILE }}
          sed -i 's|sha256 ".*"|sha256 "${{ steps.sha256.outputs.sha256 }}"|g' ${{ env.FORMULA_FILE }}

          echo "📋 Formula changes:"
          git diff ${{ env.FORMULA_FILE }}

      - name: Validate formula syntax
        working-directory: homebrew-tap
        run: |
          echo "🔍 Validating formula syntax..."

          # Check Ruby syntax
          ruby -c ${{ env.FORMULA_FILE }}
          echo "✅ Ruby syntax valid"

          # Run brew audit
          brew audit --strict --online ${{ env.FORMULA_FILE }}
          echo "✅ Brew audit passed"

      - name: Test formula installation
        working-directory: homebrew-tap
        run: |
          echo "🧪 Testing formula installation..."

          # Install from local formula
          brew install --build-from-source ${{ env.FORMULA_FILE }}

          # Verify installation
          if ! command -v rxiv &> /dev/null; then
            echo "❌ rxiv command not found after installation"
            exit 1
          fi

          # Verify version
          INSTALLED_VERSION=$(rxiv --version | grep -o 'v[0-9.]*' | head -1)
          EXPECTED_VERSION="v${{ steps.release.outputs.version }}"

          if [ "$INSTALLED_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "❌ Version mismatch: expected $EXPECTED_VERSION, got $INSTALLED_VERSION"
            exit 1
          fi

          echo "✅ Formula test successful: $INSTALLED_VERSION"

      - name: Commit and push directly to main
        working-directory: homebrew-tap
        run: |
          # Configure git
          git config user.name "rxiv-maker-bot"
          git config user.email "noreply@henriqueslab.org"

          # Check if there are changes to commit
          if git diff --quiet ${{ env.FORMULA_FILE }}; then
            echo "📝 No changes detected, formula already up to date"
            exit 0
          fi

          # Commit changes
          git add ${{ env.FORMULA_FILE }}
          git commit -m "chore: update rxiv-maker to v${{ steps.release.outputs.version }}

          Auto-generated direct update from rxiv-maker release v${{ steps.release.outputs.version }}

          - Updated URL: ${{ steps.release.outputs.tarball_url }}
          - Updated SHA256: ${{ steps.sha256.outputs.sha256 }}
          - Formula validated and tested successfully

          🤖 Generated by streamlined GitHub Actions workflow"

          # Push directly to main
          echo "📤 Pushing directly to main..."
          git push origin main
          echo "✅ Successfully pushed to main"

      - name: Post-push verification
        working-directory: homebrew-tap
        run: |
          echo "🔍 Verifying push was successful..."

          # Wait for GitHub to process the push
          sleep 10

          # Fetch latest changes to verify
          git fetch origin main
          LATEST_COMMIT=$(git rev-parse origin/main)
          LOCAL_COMMIT=$(git rev-parse HEAD)

          if [ "$LATEST_COMMIT" != "$LOCAL_COMMIT" ]; then
            echo "❌ Push verification failed: commits don't match"
            echo "Local: $LOCAL_COMMIT"
            echo "Remote: $LATEST_COMMIT"
            exit 1
          fi

          echo "✅ Push verification successful"

      - name: Cleanup test installation
        if: always()
        run: |
          # Clean up test installation
          brew uninstall rxiv-maker || true
          echo "🧹 Cleanup completed"

      - name: Rollback on failure
        if: failure()
        working-directory: homebrew-tap
        run: |
          echo "❌ Workflow failed, initiating rollback..."

          if [ -n "${{ env.backup_commit }}" ]; then
            echo "🔄 Rolling back to commit: ${{ env.backup_commit }}"

            # Reset to backup commit
            git reset --hard ${{ env.backup_commit }}

            # Force push to restore previous state
            git push --force origin main

            echo "✅ Rollback completed"
          else
            echo "⚠️ No backup commit found, manual intervention required"
          fi

      - name: Send notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "## ✅ Homebrew Formula Updated Successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Version**: v${{ steps.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "**Formula**: Direct push to main completed" >> $GITHUB_STEP_SUMMARY
            echo "**Validation**: All tests passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🍺 Users can now install with: \`brew install HenriquesLab/rxiv-maker/rxiv-maker\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Homebrew Formula Update Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Version**: v${{ steps.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "**Status**: Update failed, rollback initiated" >> $GITHUB_STEP_SUMMARY
            echo "**Action**: Manual review required" >> $GITHUB_STEP_SUMMARY
          fi
