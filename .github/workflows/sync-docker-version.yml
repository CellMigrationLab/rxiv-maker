name: Sync Docker Version

on:
  push:
    branches: [ main ]
    paths:
      - 'src/rxiv_maker/__version__.py'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force rebuild Docker images even if version unchanged'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  actions: write

jobs:
  check-version-change:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      version_changed: ${{ steps.check-change.outputs.changed }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need at least 2 commits to compare

    - name: Get current version
      id: get-version
      run: |
        VERSION=$(python3 -c "
        import sys
        sys.path.insert(0, 'src')
        from rxiv_maker.__version__ import __version__
        print(__version__)
        ")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"

    - name: Check if version changed
      id: check-change
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force_build }}" = "true" ]; then
          echo "Force build requested"
          echo "changed=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Check if version file changed in this push
        if git diff --name-only HEAD~1 HEAD | grep -q "src/rxiv_maker/__version__.py"; then
          echo "Version file changed"
          # Get previous version if possible
          PREV_VERSION=$(git show HEAD~1:src/rxiv_maker/__version__.py | python3 -c "
          import sys
          exec(sys.stdin.read())
          print(__version__)
          " 2>/dev/null || echo "unknown")

          CURRENT_VERSION="${{ steps.get-version.outputs.version }}"

          echo "Previous version: $PREV_VERSION"
          echo "Current version: $CURRENT_VERSION"

          if [ "$PREV_VERSION" != "$CURRENT_VERSION" ]; then
            echo "Version changed from $PREV_VERSION to $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "Version file changed but version is the same"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "Version file not changed"
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

  trigger-docker-builds:
    needs: check-version-change
    runs-on: ubuntu-latest
    if: needs.check-version-change.outputs.version_changed == 'true'

    steps:
    - name: Trigger base image build
      run: |
        echo "Triggering base Docker image build for version ${{ needs.check-version-change.outputs.version }}"

        # Try to trigger repository_dispatch in docker-rxiv-maker submodule
        # Use DOCKER_SYNC_TOKEN if available, otherwise fall back to GITHUB_TOKEN
        AUTH_TOKEN="${{ secrets.DOCKER_SYNC_TOKEN || secrets.GITHUB_TOKEN }}"

        echo "Using authentication token for Docker repository dispatch..."

        RESPONSE=$(curl -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token $AUTH_TOKEN" \
          -H "User-Agent: rxiv-maker-sync" \
          -w "HTTP_CODE:%{http_code}" \
          -s \
          https://api.github.com/repos/HenriquesLab/docker-rxiv-maker/dispatches \
          -d '{
            "event_type": "build-docker-image",
            "client_payload": {
              "version": "${{ needs.check-version-change.outputs.version }}",
              "source_repo": "${{ github.repository }}",
              "source_commit": "${{ github.sha }}",
              "trigger_type": "version_sync"
            }
          }' 2>&1)

        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)

        if [ "$HTTP_CODE" = "204" ]; then
          echo "✅ Successfully triggered Docker image build"
        elif [ "$HTTP_CODE" = "401" ]; then
          echo "❌ Authentication failed - check DOCKER_SYNC_TOKEN or GITHUB_TOKEN permissions"
          echo "Response: $RESPONSE"
          exit 1
        elif [ "$HTTP_CODE" = "404" ]; then
          echo "❌ Repository not found or no dispatch permission"
          echo "Response: $RESPONSE"
          exit 1
        else
          echo "⚠️ Unexpected response from GitHub API (HTTP $HTTP_CODE)"
          echo "Response: $RESPONSE"
          echo "Continuing anyway..."
        fi

    - name: Wait for Docker build to start
      run: |
        echo "Waiting 30 seconds for Docker build to initialize..."
        sleep 30

    - name: Verify Docker image availability
      run: |
        echo "Checking if Docker image will be available..."
        EXPECTED_IMAGE="henriqueslab/rxiv-maker-base:v${{ needs.check-version-change.outputs.version }}"
        echo "Expected image: $EXPECTED_IMAGE"

        # This is informational - the actual availability will be checked by the build workflow
        echo "Note: Image build may take 10-15 minutes to complete"
        echo "Monitor build progress at: https://github.com/HenriquesLab/docker-rxiv-maker/actions"

    - name: Summary
      run: |
        echo "## Docker Version Sync Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.check-version-change.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Action**: Triggered Docker image build" >> $GITHUB_STEP_SUMMARY
        echo "- **Expected Image**: henriqueslab/rxiv-maker-base:v${{ needs.check-version-change.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Build triggered successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "1. Monitor Docker build at [docker-rxiv-maker actions](https://github.com/HenriquesLab/docker-rxiv-maker/actions)" >> $GITHUB_STEP_SUMMARY
        echo "2. Once complete, future PDF builds will use the new versioned image" >> $GITHUB_STEP_SUMMARY

  skip-notification:
    needs: check-version-change
    runs-on: ubuntu-latest
    if: needs.check-version-change.outputs.version_changed == 'false'

    steps:
    - name: No action needed
      run: |
        echo "No version change detected"
        echo "Current version: ${{ needs.check-version-change.outputs.version }}"
        echo "No Docker build triggered"
