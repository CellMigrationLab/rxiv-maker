name: Update Homebrew Formula

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update formula to (e.g., 1.3.0)'
        required: true
        type: string
      force_update:
        description: 'Force update even if version exists'
        required: false
        default: false
        type: boolean
      wait_for_pypi:
        description: 'Wait for PyPI package availability before updating'
        required: false
        default: true
        type: boolean
  schedule:
    # Check for new versions daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  update-formula:
    name: Update Homebrew Formula
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Extract version information
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
          # Manual trigger - use provided version
          VERSION="${{ github.event.inputs.version }}"
          echo "Manual trigger - using specified version: $VERSION"
        elif [ "${{ github.event_name }}" = "schedule" ]; then
          # Scheduled trigger - check for latest version on PyPI
          echo "Scheduled trigger - checking for latest version on PyPI..."
          LATEST_VERSION=$(curl -s "https://pypi.org/pypi/rxiv-maker/json" | python -c "
          import json, sys
          try:
              data = json.load(sys.stdin)
              print(data['info']['version'])
          except:
              print('error')
          ")

          if [ "$LATEST_VERSION" = "error" ]; then
            echo "❌ Failed to get latest version from PyPI"
            exit 1
          fi

          VERSION="$LATEST_VERSION"
          echo "Found latest PyPI version: $VERSION"

          # Check if this version is already in the formula
          CURRENT_VERSION=$(grep -E '^  version ' homebrew-rxiv-maker/Formula/rxiv-maker.rb | sed 's/.*"\(.*\)".*/\1/')
          if [ "$VERSION" = "$CURRENT_VERSION" ]; then
            echo "✅ Formula already up to date with version $VERSION"
            echo "SKIP_UPDATE=true" >> $GITHUB_OUTPUT
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Current formula version: $CURRENT_VERSION"
          echo "New version available: $VERSION"
        else
          echo "❌ Invalid trigger or missing version"
          exit 1
        fi

        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Version to update: $VERSION"

    - name: Wait for PyPI package availability
      id: wait-pypi
      if: steps.version.outputs.SKIP_UPDATE != 'true' && github.event.inputs.wait_for_pypi != 'false'
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        PYPI_URL="https://pypi.org/pypi/rxiv-maker/$VERSION/json"

        echo "Waiting for PyPI package availability..."
        echo "Checking: $PYPI_URL"

        # Wait up to 30 minutes for package to become available
        for i in {1..180}; do
          if curl -f -s "$PYPI_URL" > /dev/null; then
            echo "✅ Package available on PyPI after $((i * 10)) seconds"
            break
          fi

          if [ $i -eq 180 ]; then
            echo "❌ Package not available after 30 minutes"
            echo "Manual intervention may be required"
            exit 1
          fi

          echo "⏳ Attempt $i/180: Package not yet available, waiting 10 seconds..."
          sleep 10
        done

    - name: Get PyPI package information
      id: pypi
      if: steps.version.outputs.SKIP_UPDATE != 'true'
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        echo "Fetching PyPI information for version $VERSION..."

        # Get package information from PyPI
        PYPI_URL="https://pypi.org/pypi/rxiv-maker/$VERSION/json"
        echo "Checking PyPI URL: $PYPI_URL"

        # Download package info and extract download URL and SHA256
        curl -s "$PYPI_URL" > package_info.json

        # Check if the version exists on PyPI
        if ! grep -q '"version"' package_info.json; then
          echo "❌ Version $VERSION not found on PyPI"
          echo "Available versions:"
          curl -s "https://pypi.org/pypi/rxiv-maker/json" | python -c "
          import json, sys
          data = json.load(sys.stdin)
          versions = list(data['releases'].keys())
          for v in sorted(versions, reverse=True)[:10]:
              print(f'  - {v}')
          "
          exit 1
        fi

        # Extract source distribution URL and SHA256
        DOWNLOAD_URL=$(python -c "
        import json
        with open('package_info.json') as f:
            data = json.load(f)
        for file in data['urls']:
            if file['packagetype'] == 'sdist':
                print(file['url'])
                break
        ")

        SHA256=$(python -c "
        import json
        with open('package_info.json') as f:
            data = json.load(f)
        for file in data['urls']:
            if file['packagetype'] == 'sdist':
                print(file['digests']['sha256'])
                break
        ")

        echo "Found package information:"
        echo "  URL: $DOWNLOAD_URL"
        echo "  SHA256: $SHA256"

        echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
        echo "SHA256=$SHA256" >> $GITHUB_OUTPUT

    - name: Update formula
      id: update
      if: steps.version.outputs.SKIP_UPDATE != 'true'
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        DOWNLOAD_URL="${{ steps.pypi.outputs.DOWNLOAD_URL }}"
        SHA256="${{ steps.pypi.outputs.SHA256 }}"

        FORMULA_FILE="homebrew-rxiv-maker/Formula/rxiv-maker.rb"

        echo "Updating formula file: $FORMULA_FILE"
        echo "  Version: $VERSION"
        echo "  URL: $DOWNLOAD_URL"
        echo "  SHA256: $SHA256"

        # Create backup
        cp "$FORMULA_FILE" "$FORMULA_FILE.backup"

        # Update the formula using sed
        sed -i.tmp "s|url \".*\"|url \"$DOWNLOAD_URL\"|g" "$FORMULA_FILE"
        sed -i.tmp "s|sha256 \".*\"|sha256 \"$SHA256\"|g" "$FORMULA_FILE"
        sed -i.tmp "s|version \".*\"|version \"$VERSION\"|g" "$FORMULA_FILE"

        # Remove temporary files
        rm -f "$FORMULA_FILE.tmp"

        echo "✅ Formula updated successfully"

        # Show diff
        echo "Changes made:"
        diff "$FORMULA_FILE.backup" "$FORMULA_FILE" || true

        # Check if there were actual changes
        if diff -q "$FORMULA_FILE.backup" "$FORMULA_FILE" > /dev/null; then
          echo "No changes needed - formula already up to date"
          echo "CHANGES_MADE=false" >> $GITHUB_OUTPUT
        else
          echo "Formula updated with new version"
          echo "CHANGES_MADE=true" >> $GITHUB_OUTPUT
        fi

    - name: Install Homebrew (if not present)
      run: |
        if ! command -v brew &> /dev/null; then
          echo "Installing Homebrew..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        else
          echo "Homebrew already installed"
        fi

    - name: Test formula locally
      if: steps.version.outputs.SKIP_UPDATE != 'true'
      run: |
        echo "Testing updated formula..."

        # Install formula in development mode
        brew install --build-from-source ./homebrew-rxiv-maker/Formula/rxiv-maker.rb

        # Test basic functionality
        rxiv --version
        rxiv --help

        # Test initialization (without building to save time)
        mkdir -p /tmp/test-manuscript
        cd /tmp/test-manuscript
        rxiv init .

        # Verify files were created
        ls -la
        test -f "00_CONFIG.yml"
        test -f "01_MAIN.md"
        test -f "03_REFERENCES.bib"

        echo "✅ Formula test completed successfully"

    - name: Configure Git for commit
      if: steps.update.outputs.CHANGES_MADE == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Commit updated formula
      if: steps.version.outputs.SKIP_UPDATE != 'true' && steps.update.outputs.CHANGES_MADE == 'true'
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"

        git add homebrew-rxiv-maker/Formula/rxiv-maker.rb
        git commit -m "Update Homebrew formula to version $VERSION

        - Updated URL to PyPI release $VERSION
        - Updated SHA256 checksum
        - Formula tested successfully on macOS

        🤖 Generated with GitHub Actions"

    - name: Push changes
      if: steps.version.outputs.SKIP_UPDATE != 'true' && steps.update.outputs.CHANGES_MADE == 'true'
      run: |
        git push origin main

    - name: Create summary
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        SKIP_UPDATE="${{ steps.version.outputs.SKIP_UPDATE }}"
        CHANGES_MADE="${{ steps.update.outputs.CHANGES_MADE }}"

        echo "## 🍺 Homebrew Formula Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Formula Location**: \`homebrew-rxiv-maker/Formula/rxiv-maker.rb\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "$SKIP_UPDATE" = "true" ]; then
          echo "### ✅ Already Up to Date" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Formula is already at the latest version ($VERSION)" >> $GITHUB_STEP_SUMMARY
        elif [ "$CHANGES_MADE" = "true" ]; then
          echo "### ✅ Update Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Users can now install the updated version with:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "brew upgrade rxiv-maker" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "### ℹ️ No Update Needed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Formula was already up to date with version $VERSION" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Installation Instructions for New Users" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "brew tap henriqueslab/rxiv-maker https://github.com/henriqueslab/rxiv-maker" >> $GITHUB_STEP_SUMMARY
        echo "brew install rxiv-maker" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
