name: Test Pipeline

on:
  push:
    branches: [main, dev]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, dev]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci.yml'
  workflow_dispatch:
    inputs:
      test-scope:
        description: 'Test scope'
        required: false
        default: 'standard'
        type: choice
        options:
          - 'quick'        # Lint + basic tests only
          - 'standard'     # Default: lint, test, integration, build
          - 'comprehensive' # All tests including performance, security, ecosystem
      python-versions:
        description: 'Python versions to test (comma-separated)'
        required: false
        default: '3.11,3.12'
        type: string
      os-matrix:
        description: 'Operating systems to test (comma-separated)'
        required: false
        default: 'ubuntu-latest,windows-latest,macos-latest'
        type: string
      include-ecosystem:
        description: 'Include ecosystem integration tests'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  setup:
    name: Setup Configuration
    runs-on: ubuntu-latest
    outputs:
      test-scope: ${{ steps.config.outputs.test-scope }}
      python-versions: ${{ steps.config.outputs.python-versions }}
      os-matrix: ${{ steps.config.outputs.os-matrix }}
      test-matrix: ${{ steps.config.outputs.test-matrix }}
      run-comprehensive: ${{ steps.config.outputs.run-comprehensive }}
      run-ecosystem: ${{ steps.config.outputs.run-ecosystem }}

    steps:
      - name: Configure test parameters
        id: config
        shell: bash
        run: |
          # Determine test scope
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            test_scope="${{ inputs.test-scope }}"
            python_versions="${{ inputs.python-versions }}"
            os_matrix="${{ inputs.os-matrix }}"
            run_ecosystem="${{ inputs.include-ecosystem }}"
          else
            # Auto-triggered (push/PR) - use standard scope
            test_scope="standard"
            python_versions="3.11,3.12"
            os_matrix="ubuntu-latest,windows-latest,macos-latest"
            run_ecosystem="false"
          fi

          echo "test-scope=$test_scope" >> $GITHUB_OUTPUT

          # Parse Python versions
          python_array=$(echo "$python_versions" | python3 -c "
          import sys, json
          versions = [v.strip() for v in sys.stdin.read().strip().split(',') if v.strip()]
          print(json.dumps(versions))
          ")
          echo "python-versions=$python_array" >> $GITHUB_OUTPUT

          # Parse OS matrix
          os_array=$(echo "$os_matrix" | python3 -c "
          import sys, json
          oses = [os.strip() for os in sys.stdin.read().strip().split(',') if os.strip()]
          print(json.dumps(oses))
          ")
          echo "os-matrix=$os_array" >> $GITHUB_OUTPUT

          # Create test matrix
          echo "test-matrix={\"os\": $os_array, \"python-version\": $python_array}" >> $GITHUB_OUTPUT

          # Set comprehensive flag
          if [ "$test_scope" = "comprehensive" ]; then
            echo "run-comprehensive=true" >> $GITHUB_OUTPUT
          else
            echo "run-comprehensive=false" >> $GITHUB_OUTPUT
          fi

          echo "run-ecosystem=$run_ecosystem" >> $GITHUB_OUTPUT

          # Summary
          echo "## Test Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Scope**: $test_scope" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Versions**: $python_versions" >> $GITHUB_STEP_SUMMARY
          echo "- **Operating Systems**: $os_matrix" >> $GITHUB_STEP_SUMMARY
          echo "- **Ecosystem Testing**: $run_ecosystem" >> $GITHUB_STEP_SUMMARY

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.test-scope != 'quick' || github.event_name != 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: uv sync

      - name: Run code quality checks
        run: |
          echo "Running Ruff linting..."
          uv run ruff check src/ tests/

          echo "Running Ruff formatting..."
          uv run ruff format --check src/ tests/

          echo "Running type checking..."
          uv run mypy src/

          echo "Running security checks..."
          uv run bandit -r src/ -ll

  test:
    name: Tests (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.test-matrix) }}
      fail-fast: false
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libfreetype6-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libwebp-dev \
            libopenjp2-7-dev \
            zlib1g-dev \
            liblcms2-dev \
            libffi-dev \
            pkg-config \
            git

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install \
            freetype \
            jpeg \
            libpng \
            libtiff \
            webp \
            openjpeg \
            zlib \
            lcms2 \
            libffi \
            pkg-config

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: echo "Using pip wheels for Windows dependencies"

      - name: Install dependencies
        run: uv sync

      - name: Install package in development mode
        run: |
          # Install package in editable mode so rxiv command is available
          uv pip install -e .

      - name: Verify CLI installation
        run: |
          # Test that rxiv command is available
          which rxiv || echo "rxiv not in PATH"
          uv run rxiv --version || echo "rxiv command failed"

      - name: Run unit tests
        run: |
          uv run pytest tests/ --cov=rxiv_maker --cov-report=xml --cov-report=term-missing -n auto --maxfail=10 --tb=short -v
        env:
          PYTHONIOENCODING: utf-8

      - name: Test CLI functionality
        shell: bash
        run: |
          echo "Testing CLI installation and basic functionality..."
          uv run python -m rxiv_maker.cli --version
          uv run python -m rxiv_maker.cli --help
          uv run python -m rxiv_maker.cli config show || echo "Config command not available"

      - name: Test package installation
        run: |
          # Build and test wheel installation
          uv build
          python -m pip install --upgrade pip
          python -m pip install dist/*.whl
          python -c "import rxiv_maker; print('✅ Package imports successfully')"
          python -c "from rxiv_maker import __version__; print(f'Version: {__version__}')"

      - name: Upload coverage
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, lint, test]
    if: needs.setup.outputs.test-scope != 'quick'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies and LaTeX
        run: |
          uv sync --group dev
          sudo apt-get update
          sudo apt-get install -y \
            texlive-latex-base \
            texlive-latex-extra \
            texlive-fonts-recommended \
            texlive-fonts-extra \
            texlive-science \
            texlive-plain-generic

      - name: Test manuscript generation workflow
        run: |
          echo "Testing manuscript generation..."
          mkdir -p test-workspace && cd test-workspace

          uv run python -m rxiv_maker.cli init test-manuscript --no-interactive || echo "Init command failed"

          if [ -d "test-manuscript" ]; then
            echo "✅ Manuscript initialized successfully"
            cd test-manuscript
            uv run python -m rxiv_maker.cli validate --no-doi || echo "Validation failed"
            cd ..
          fi
          cd ..

      - name: Run integration tests
        run: |
          uv run pytest tests/integration/ -v --tb=short || echo "Integration tests not available"

  build:
    name: Build & Test Distribution
    runs-on: ubuntu-latest
    needs: [setup, lint, test]
    if: needs.setup.outputs.test-scope != 'quick'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Build package
        run: uv build

      - name: Test distribution
        run: |
          python -m pip install --upgrade pip
          python -m pip install dist/*.whl
          python -c "import rxiv_maker; print('✅ Package imports successfully')"
          python -c "from rxiv_maker import __version__; print(f'Version: {__version__}')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.run-comprehensive == 'true'
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies and build
        run: |
          python -m pip install --upgrade pip build
          python -m build --wheel --outdir dist/
          python -m pip install dist/*.whl

      - name: Run performance benchmarks
        run: |
          echo "📊 Running performance benchmarks..."

          # Import time
          start_time=$(date +%s%N)
          python -c "import rxiv_maker"
          end_time=$(date +%s%N)
          import_time=$((($end_time - $start_time) / 1000000))

          # CLI startup time
          start_time=$(date +%s%N)
          rxiv --version > /dev/null
          end_time=$(date +%s%N)
          cli_time=$((($end_time - $start_time) / 1000000))

          # Package size
          wheel_size=$(du -h dist/*.whl | cut -f1)

          echo "📊 Performance Metrics:" >> $GITHUB_STEP_SUMMARY
          echo "- Import time: ${import_time}ms" >> $GITHUB_STEP_SUMMARY
          echo "- CLI startup time: ${cli_time}ms" >> $GITHUB_STEP_SUMMARY
          echo "- Package size: ${wheel_size}" >> $GITHUB_STEP_SUMMARY

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.run-comprehensive == 'true'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install security tools and build package
        run: |
          python -m pip install --upgrade pip build bandit safety
          python -m build --wheel --outdir dist/
          python -m pip install dist/*.whl

      - name: Run security scans
        run: |
          echo "🔒 Running security scans..."

          # Bandit scan
          if [ -d "src" ]; then
            bandit -r src/ -f json -o bandit-report.json || echo "Bandit completed with issues"
          fi

          # Safety check
          safety check --json --output safety-report.json || echo "Safety completed with issues"

          echo "✅ Security scans completed"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.sha }}
          path: |
            bandit-report.json
            safety-report.json

  ecosystem:
    name: Ecosystem Testing
    runs-on: ${{ matrix.os }}
    needs: setup
    if: needs.setup.outputs.run-ecosystem == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            package-managers: "pypi"
          - os: windows-latest
            package-managers: "pypi,scoop"
          - os: macos-latest
            package-managers: "pypi,homebrew"
      fail-fast: false
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Test PyPI installation
        if: contains(matrix.package-managers, 'pypi')
        run: |
          echo "🐍 Testing PyPI installation..."
          python -m pip install --upgrade pip

          # Test current build
          python -m pip install build
          python -m build --wheel --outdir dist/
          python -m pip install dist/*.whl

          if rxiv --version; then
            echo "✅ Local package installation successful"
          else
            echo "❌ Local package installation failed"
            exit 1
          fi

      - name: Test Homebrew installation
        if: contains(matrix.package-managers, 'homebrew') && runner.os == 'macOS'
        continue-on-error: true
        run: |
          echo "🍺 Testing Homebrew tap availability..."
          if command -v brew &> /dev/null; then
            brew tap henriqueslab/rxiv-maker || echo "Tap not available (expected for new projects)"
          else
            echo "Homebrew not available in CI"
          fi

      - name: Test Scoop installation
        if: contains(matrix.package-managers, 'scoop') && runner.os == 'Windows'
        continue-on-error: true
        run: |
          Write-Host "🪣 Testing Scoop bucket availability..."
          if (Get-Command scoop -ErrorAction SilentlyContinue) {
            try {
              scoop bucket add henriqueslab https://github.com/henriqueslab/scoop-rxiv-maker
              Write-Host "✅ Bucket added successfully"
            } catch {
              Write-Host "Bucket not available (expected for new projects)"
            }
          } else {
            Write-Host "Scoop not available in CI"
          }
        shell: powershell

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [setup, lint, test, integration, build, performance, security, ecosystem]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "# CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Scope**: ${{ needs.setup.outputs.test-scope }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Job results
          jobs=(
            "lint:Code Quality"
            "test:Unit Tests"
            "integration:Integration Tests"
            "build:Build & Distribution"
            "performance:Performance Benchmarks"
            "security:Security Scan"
            "ecosystem:Ecosystem Testing"
          )

          for job_info in "${jobs[@]}"; do
            job_name="${job_info%%:*}"
            job_title="${job_info#*:}"

            # Get job result using needs context
            case $job_name in
              "lint") result="${{ needs.lint.result }}" ;;
              "test") result="${{ needs.test.result }}" ;;
              "integration") result="${{ needs.integration.result }}" ;;
              "build") result="${{ needs.build.result }}" ;;
              "performance") result="${{ needs.performance.result }}" ;;
              "security") result="${{ needs.security.result }}" ;;
              "ecosystem") result="${{ needs.ecosystem.result }}" ;;
            esac

            case $result in
              "success") echo "✅ **$job_title**: Passed" >> $GITHUB_STEP_SUMMARY ;;
              "failure") echo "❌ **$job_title**: Failed" >> $GITHUB_STEP_SUMMARY ;;
              "cancelled") echo "⚠️ **$job_title**: Cancelled" >> $GITHUB_STEP_SUMMARY ;;
              "skipped") echo "⏭️ **$job_title**: Skipped" >> $GITHUB_STEP_SUMMARY ;;
              *) echo "❓ **$job_title**: $result" >> $GITHUB_STEP_SUMMARY ;;
            esac
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
