name: Build Docker Base Images

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'src/docker/**'
      - '.github/workflows/build-docker-base.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/docker/**'
      - '.github/workflows/build-docker-base.yml'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for the built image'
        required: false
        default: 'latest'
      rxiv_version:
        description: 'rxiv-maker version to tag the image with (e.g., 1.4.8)'
        required: false
        default: ''
      platforms:
        description: 'Platforms to build for'
        required: false
        default: 'linux/amd64,linux/arm64'
  repository_dispatch:
    types: [build-docker-image]

env:
  REGISTRY: docker.io
  BASE_IMAGE_NAME: henriqueslab/rxiv-maker-base
  PYTHONIOENCODING: utf-8

permissions:
  contents: read
  packages: write
  actions: read

jobs:
  build-base:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PUSH }}

    - name: Determine version and tags
      id: version
      run: |
        # Determine version from multiple sources
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          # Repository dispatch from version sync
          VERSION="${{ github.event.client_payload.version }}"
          echo "Using version from repository_dispatch: $VERSION"
        elif [ -n "${{ github.event.inputs.rxiv_version }}" ]; then
          # Manual workflow dispatch with version
          VERSION="${{ github.event.inputs.rxiv_version }}"
          echo "Using version from manual input: $VERSION"
        elif [ "${{ github.event.inputs.tag }}" != "latest" ] && [ -n "${{ github.event.inputs.tag }}" ]; then
          # Manual workflow dispatch with custom tag
          VERSION="${{ github.event.inputs.tag }}"
          echo "Using custom tag as version: $VERSION"
        else
          # Extract version from Python package for development builds
          VERSION=$(python3 -c "
          import sys
          sys.path.insert(0, 'src')
          from rxiv_maker.__version__ import __version__
          print(__version__)
          " 2>/dev/null || echo "latest")
          echo "Using version from package: $VERSION"
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Final version: $VERSION"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event.inputs.tag != '' && github.event.inputs.tag != 'latest' }}
          type=raw,value=v${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.version != 'latest' }}
        labels: |
          org.opencontainers.image.title=rxiv-maker-base
          org.opencontainers.image.description=Ubuntu-based image with LaTeX, Python, Node.js, R, and enhanced Cairo SVG processing (no browser dependencies)
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          rxiv-maker.version=${{ steps.version.outputs.version }}
          rxiv-maker.variant=cairo-only

    - name: Build and push base image
      uses: docker/build-push-action@v6
      with:
        context: ./src/docker/images/base
        platforms: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Comprehensive Docker image testing
      if: github.event_name != 'pull_request'
      run: |
        # Build image locally for testing
        docker build -t test-base ./src/docker/images/base

        echo "## Docker Image Testing Results" >> $GITHUB_STEP_SUMMARY
        echo "Testing image: test-base" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Make test script executable
        chmod +x src/docker/test-docker-image.sh

        # Run comprehensive test suite
        if ./src/docker/test-docker-image.sh test-base; then
          echo "✅ **All Docker image tests passed**" >> $GITHUB_STEP_SUMMARY
          echo "- Basic functionality verified" >> $GITHUB_STEP_SUMMARY
          echo "- Python dependencies confirmed" >> $GITHUB_STEP_SUMMARY
          echo "- Cairo SVG processing validated" >> $GITHUB_STEP_SUMMARY
          echo "- rxiv-maker installation successful" >> $GITHUB_STEP_SUMMARY
          echo "- Pytest suite executed" >> $GITHUB_STEP_SUMMARY
          echo "- Manuscript generation tested" >> $GITHUB_STEP_SUMMARY
          echo "- Performance benchmarks completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Docker image tests failed**" >> $GITHUB_STEP_SUMMARY
          echo "Image validation failed - check logs for details" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Quick validation for pull requests
      if: github.event_name == 'pull_request'
      run: |
        # Build image locally for PR testing
        docker build -t test-base ./src/docker/images/base

        echo "=== Quick PR Validation ==="
        echo "Testing critical functionality for PR..."

        # Test basic functionality
        echo "Testing Python..."
        docker run --rm test-base python3 --version

        echo "Testing LaTeX..."
        docker run --rm test-base pdflatex --version

        echo "Testing Cairo functionality..."
        docker run --rm test-base /usr/local/bin/test-cairo.sh

        echo "Testing critical Python dependencies..."
        docker run --rm test-base python3 -c "
        import matplotlib, numpy, cairosvg, yaml
        print('✅ Critical dependencies available')
        "

        echo "✅ Quick PR validation passed!"

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker-test-results-${{ github.run_id }}
        path: |
          /tmp/rxiv-docker-test-*/
          *.log
          test_*.png
          test_*.pdf
        retention-days: 7

    - name: Performance benchmark
      if: github.event_name != 'pull_request'
      run: |
        echo "## Consolidated Performance Benchmark" >> $GITHUB_STEP_SUMMARY

        # Create test SVG
        cat > test.svg << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <svg width="400" height="200" xmlns="http://www.w3.org/2000/svg">
          <rect width="400" height="200" fill="lightblue" stroke="navy" stroke-width="2"/>
          <text x="200" y="100" text-anchor="middle" font-family="Liberation Sans" font-size="18">Consolidated Performance Test</text>
        </svg>
        EOF

        # Time SVG to PNG conversion
        echo "- **SVG to PNG conversion (consolidated image)**:" >> $GITHUB_STEP_SUMMARY
        START_TIME=$(date +%s.%N)
        docker run --rm -v $(pwd):/workspace ${{ env.BASE_IMAGE_NAME }}:latest \
          python3 -c "
        import cairosvg
        from pathlib import Path
        svg_content = Path('/workspace/test.svg').read_text()
        png_data = cairosvg.svg2png(bytestring=svg_content.encode('utf-8'))
        Path('/workspace/test.png').write_bytes(png_data)
        print(f'Converted SVG to PNG ({len(png_data)} bytes)')
        " 2>/dev/null || echo "  - ⚠️ Benchmark skipped (image not available yet)" >> $GITHUB_STEP_SUMMARY
        END_TIME=$(date +%s.%N)
        DURATION=$(python3 -c "print(f'{$END_TIME - $START_TIME:.2f}')" 2>/dev/null || echo "N/A")
        echo "  - Duration: ${DURATION}s" >> $GITHUB_STEP_SUMMARY

        # Test R plotting performance
        echo "- **R plotting performance**:" >> $GITHUB_STEP_SUMMARY
        cat > test.R << 'EOF'
        library(Cairo)
        Cairo(file="test_r.png", type="png", width=400, height=200)
        plot(1:10, main="R Performance Test")
        dev.off()
        EOF
        START_TIME_R=$(date +%s.%N)
        docker run --rm -v $(pwd):/workspace ${{ env.BASE_IMAGE_NAME }}:latest \
          R --slave -f /workspace/test.R 2>/dev/null || echo "  - ⚠️ R benchmark skipped" >> $GITHUB_STEP_SUMMARY
        END_TIME_R=$(date +%s.%N)
        DURATION_R=$(python3 -c "print(f'{$END_TIME_R - $START_TIME_R:.2f}')" 2>/dev/null || echo "N/A")
        echo "  - Duration: ${DURATION_R}s" >> $GITHUB_STEP_SUMMARY

    - name: Update repository description
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      run: |
        # Update Docker Hub repository description with retry logic
        for i in {1..3}; do
          echo "Updating Docker Hub description, attempt $i/3..."
          if curl -X PATCH \
            -H "Authorization: Bearer ${{ secrets.DOCKER_PUSH }}" \
            -H "Content-Type: application/json" \
            --max-time 30 \
            --retry 2 \
            --retry-delay 5 \
            -d '{
              "full_description": "# Rxiv-Maker Consolidated Docker Image\n\nUbuntu-based image with LaTeX, Python, Node.js, R, and comprehensive Cairo SVG processing for scientific document generation. This consolidated image incorporates all features from the former experimental-cairo variant.\n\n## Quick Start\n```bash\ndocker run -it --rm -v $(pwd):/workspace henriqueslab/rxiv-maker-base:latest\n```\n\n## Consolidated Features\n- **Complete LaTeX distribution** with all packages\n- **Python 3.11** with enhanced Cairo libraries (CairoSVG, pycairo, pygobject)\n- **Advanced SVG processing** with consolidated Cairo capabilities\n- **Extended font collection** for better rendering quality\n- **Node.js 18** with Mermaid CLI (SVG-only output)\n- **R with Cairo graphics** support including magick and additional packages\n- **Multi-platform support** (AMD64/ARM64)\n- **Enhanced system dependencies** for multimedia processing\n- **No browser dependencies** (Cairo-only for optimal performance)\n\n## Migration from Experimental\nThis image now includes all features from the deprecated henriqueslab/rxiv-maker-experimental:latest-cairo. Simply use this consolidated base image instead.\n\n## Usage with rxiv-maker\n```bash\n# Use Docker engine mode\nRXIV_ENGINE=docker rxiv pdf\n```\n\n## Documentation\nSee [GitHub repository](https://github.com/${{ github.repository }}) for full documentation and migration guides."
            }' \
            "https://hub.docker.com/v2/repositories/${{ env.BASE_IMAGE_NAME }}/"; then
            echo "✅ Docker Hub description updated successfully"
            break
          else
            if [ $i -eq 3 ]; then
              echo "⚠️ Failed to update Docker Hub description after 3 attempts"
            else
              echo "⚠️ Attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          fi
        done

    - name: Summary
      if: github.event_name != 'pull_request'
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.BASE_IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Successfully built and pushed" >> $GITHUB_STEP_SUMMARY

        # Output information for debugging
        echo "Built image: ${{ env.BASE_IMAGE_NAME }}:v${{ steps.version.outputs.version }}"
