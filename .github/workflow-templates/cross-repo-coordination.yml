name: Cross-Repository Coordination Template
# This template provides patterns for coordinating workflows across multiple repositories

on:
  workflow_call:
    inputs:
      target_repos:
        description: 'Comma-separated list of target repositories'
        required: true
        type: string
      action_type:
        description: 'Type of action to coordinate'
        required: true
        type: string
      payload:
        description: 'JSON payload to send to target repositories'
        required: false
        type: string
        default: '{}'
      wait_for_completion:
        description: 'Wait for target workflows to complete'
        required: false
        type: boolean
        default: false
    secrets:
      COORDINATION_TOKEN:
        description: 'Token for cross-repository coordination'
        required: false

env:
  FORCE_COLOR: 1

jobs:
  coordinate:
    name: Coordinate Cross-Repository Actions
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Setup coordination environment
        run: |
          echo "Setting up cross-repository coordination..."
          python -m pip install --upgrade pip requests

      - name: Parse target repositories
        id: parse-repos
        run: |
          # Convert comma-separated repos to JSON array
          REPOS="${{ inputs.target_repos }}"
          REPO_ARRAY=$(echo "$REPOS" | python3 -c "
          import sys, json
          repos = [repo.strip() for repo in sys.stdin.read().strip().split(',') if repo.strip()]
          print(json.dumps(repos))
          ")
          echo "repos=$REPO_ARRAY" >> $GITHUB_OUTPUT
          echo "Targeting repositories: $REPO_ARRAY"

      - name: Validate coordination payload
        id: validate-payload
        run: |
          # Validate and enhance the payload
          python3 -c "
          import json, sys
          payload = json.loads('${{ inputs.payload }}')

          # Add coordination metadata
          enhanced_payload = {
              **payload,
              'coordination': {
                  'source_repo': '${{ github.repository }}',
                  'source_commit': '${{ github.sha }}',
                  'source_run_id': '${{ github.run_id }}',
                  'action_type': '${{ inputs.action_type }}',
                  'timestamp': '$(date -u +%Y-%m-%dT%H:%M:%SZ)'
              }
          }

          print(json.dumps(enhanced_payload, indent=2))
          " > enhanced_payload.json

          echo "Enhanced coordination payload:"
          cat enhanced_payload.json

      - name: Trigger repository dispatches
        id: dispatch
        run: |
          # Get authentication token
          if [ -n "${{ secrets.COORDINATION_TOKEN }}" ]; then
            AUTH_TOKEN="${{ secrets.COORDINATION_TOKEN }}"
            echo "Using dedicated COORDINATION_TOKEN..."
          else
            AUTH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
            echo "Using fallback GITHUB_TOKEN..."
            echo "‚ö†Ô∏è For better cross-repo access, consider setting COORDINATION_TOKEN secret"
          fi

          # Read enhanced payload
          PAYLOAD=$(cat enhanced_payload.json)

          # Parse target repositories
          REPOS='${{ steps.parse-repos.outputs.repos }}'

          python3 << 'EOF'
          import json
          import requests
          import sys
          import time

          def trigger_repository_dispatch(repo, payload, token, action_type):
              """Trigger repository_dispatch event on target repository."""
              url = f"https://api.github.com/repos/{repo}/dispatches"
              headers = {
                  "Accept": "application/vnd.github.v3+json",
                  "Authorization": f"token {token}",
                  "User-Agent": "cross-repo-coordinator"
              }

              dispatch_payload = {
                  "event_type": action_type,
                  "client_payload": payload
              }

              try:
                  response = requests.post(url, json=dispatch_payload, headers=headers, timeout=30)
                  return response.status_code, response.text
              except Exception as e:
                  return 0, str(e)

          # Load configuration
          repos = json.loads('${{ steps.parse-repos.outputs.repos }}')
          payload = json.loads(open('enhanced_payload.json').read())
          token = "$AUTH_TOKEN"
          action_type = "${{ inputs.action_type }}"

          results = []
          for repo in repos:
              print(f"Triggering {action_type} on {repo}...")
              status_code, response = trigger_repository_dispatch(repo, payload, token, action_type)

              result = {
                  "repo": repo,
                  "status_code": status_code,
                  "success": status_code == 204,
                  "response": response[:200] if response else ""  # Truncate response
              }
              results.append(result)

              if status_code == 204:
                  print(f"‚úÖ Successfully triggered {repo}")
              elif status_code == 401:
                  print(f"‚ùå Authentication failed for {repo}")
              elif status_code == 404:
                  print(f"‚ùå Repository not found or no dispatch permission: {repo}")
              else:
                  print(f"‚ö†Ô∏è Unexpected response from {repo}: HTTP {status_code}")

              # Small delay between requests
              time.sleep(1)

          # Save results for later steps
          with open('coordination_results.json', 'w') as f:
              json.dump(results, f, indent=2)

          # Calculate success rate
          successful = sum(1 for r in results if r['success'])
          total = len(results)
          print(f"\nCoordination summary: {successful}/{total} repositories triggered successfully")

          # Exit with error if no repositories were successfully triggered
          if successful == 0 and total > 0:
              sys.exit(1)
          EOF

      - name: Wait for completion
        if: inputs.wait_for_completion
        run: |
          echo "Waiting for target workflows to complete..."
          echo "‚ö†Ô∏è Completion monitoring not implemented in this template"
          echo "Consider implementing workflow status checking for production use"

          # Example implementation:
          # 1. Store triggered workflow IDs
          # 2. Poll workflow status APIs
          # 3. Wait for completion or timeout
          # 4. Report final status

      - name: Generate coordination summary
        if: always()
        run: |
          echo "## üîÑ Cross-Repository Coordination Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Action Type**: ${{ inputs.action_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Source Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "coordination_results.json" ]; then
            echo "### üìä Results by Repository" >> $GITHUB_STEP_SUMMARY
            python3 << 'EOF'
          import json

          results = json.load(open('coordination_results.json'))

          for result in results:
              repo = result['repo']
              if result['success']:
                  print(f"- ‚úÖ **{repo}**: Successfully triggered")
              elif result['status_code'] == 401:
                  print(f"- ‚ùå **{repo}**: Authentication failed")
              elif result['status_code'] == 404:
                  print(f"- ‚ùå **{repo}**: Repository not found or insufficient permissions")
              else:
                  print(f"- ‚ö†Ô∏è **{repo}**: HTTP {result['status_code']}")
          EOF
          else
            echo "‚ùå **No coordination results available**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coordination results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coordination-results-${{ github.run_id }}
          path: |
            coordination_results.json
            enhanced_payload.json
          retention-days: 30
